<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd   
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 支持spring上下文注释配置 -->
	<context:annotation-config />

	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan
		base-package="com.segi.uhomecp.**.controller,com.segi.uhomecp.**.rest">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 静态资源的路径的配置 -->
	<mvc:resources mapping="/static/**" location="classpath:/static/"
		cache-period="31556926" />
	<mvc:resources mapping="/druid/**"
		location="classpath:/support/http/resources/" />
	<mvc:resources mapping="/component/**"
		location="classpath:/webapps/pages/component/" />
	<mvc:resources location="/resource/" mapping="/resource/**" />
	<mvc:resources mapping="*.html" location="/" />
	<mvc:resources mapping="/**" location="/" />

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="application/json" />
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="mediaTypes">
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="false" />
		<!-- <property name= "parameterName" value= "format"/> -->
	</bean>

	<!-- <mvc:annotation-driven> <mvc:message-converters register-defaults="true"> 
		将StringHttpMessageConverter的默认编码设为UTF-8 <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
		<constructor-arg value="UTF-8" /> </bean> 将Jackson2HttpMessageConverter的默认格式化输出设为true 
		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
		<property name="prettyPrint" value="true"/> </bean> </mvc:message-converters> 
		</mvc:annotation-driven> -->

	<!-- <context:property-placeholder location="classpath:swagger.properties" 
		/> -->
	<!-- <bean id="documentationConfig" class="com.mangofactory.swagger.configuration.DocumentationConfig" 
		/> -->
	<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" /> 
	
	<!-- <bean id="springSwaggerConfig" class="com.segi.uhomecp.swagger.SegiSpringSwaggerConfig"></bean> -->
	<bean class="com.segi.uhomecp.swagger.CustomerSwaggerConfig"></bean>
	<!-- <bean class="com.segi.uhomecp.swagger.SwaggerPluginConfigAbs"></bean> -->

	<!-- 定义JSP文件的位置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 定义无需Controller的url<->view直接映射 -->
	<mvc:view-controller path="/" view-name="index" />

	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- <prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop> 
					<prop key="org.apache.shiro.authz.AuthorizationException">error/403</prop> -->
				<prop key="java.lang.Throwable">error/500</prop>
			</props>
		</property>
	</bean>

	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<!-- <property name="validationMessageSource" ref="messageSource"/> -->
	</bean>

	<!-- <mvc:interceptors>
		<bean class="com.segi.uhomecp.interceptors.VerificationInterceptor">
			<property name="httpMessageConverter">
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<constructor-arg value="UTF-8" />
				</bean>
			</property>
			<property name="includeFilterList">
				<util:list>
					<value>/rest-api/v5/service/orderEntry/**</value>
					<value>/rest-api/v5/service/orderQuery/**</value>
					<value>/rest-api/v5/common/order/queryPendingOrderList</value>
					<value>/rest-api/v5/common/order/queryActionList</value>
					<value>/rest-api/v5/common/order/queryHandlingInfo</value>
					<value>/rest-api/v5/common/order/handleOrderForm</value>
					<value>/rest-api/v5/common/order/getQuickResponses</value>
					<value>/rest-api/v5/common/order/queryAddedCollaborator</value>
					<value>/rest-api/v5/common/order/addCollaborator</value>
					<value>/rest-api/v5/common/order/writeDownAfterwards</value>
					<value>/rest-api/v5/common/order/queryHandleOrderList</value>
				</util:list>
			</property>
		</bean>
	</mvc:interceptors> -->

	<mvc:annotation-driven>
		<mvc:argument-resolvers>
            <bean class="com.segi.uhomecp.sso.client.annotation.AdminUserMethodArgumentResolver"/>
            <bean class="com.segi.uhomecp.sso.client.annotation.HeaderMethodArgumentResolver"/>
            <bean class="com.segi.uhomecp.sso.client.annotation.UserMethodArgumentResolver"/>
            <bean class="com.segi.uhomecp.annotation.RequestParamJsonArgumentResolver" />
        </mvc:argument-resolvers>
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<!-- <property name="serializationInclusion"> <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value> 
							</property> -->
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- Spring 统一日志处理 LogInterceptor拦截器 配置 -->
	<bean id="logInterceptor" class="com.segi.uhomecp.interceptor.LogInterceptor" />
	<!-- Spring 统一异常处理 ExceptionAdvisor配置 -->
	<bean id="exceptionHandler" class="com.segi.uhomecp.advice.ExceptionAdvisor"></bean>

	<!-- Bean自动代理处理器 配置 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<!-- 配置需要进行日志记录的Rest -->
				<!-- 配置所有Rest结尾命名的Bean，即所有Rest层的类都要经过exceptionHandler异常处理类 -->
				<value>*Rest</value>
				<!-- Rest层的Bean ID 命名要以Rest结尾 -->
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>exceptionHandler</value>
				<value>logInterceptor</value>
			</list>
		</property>
	</bean>
</beans>