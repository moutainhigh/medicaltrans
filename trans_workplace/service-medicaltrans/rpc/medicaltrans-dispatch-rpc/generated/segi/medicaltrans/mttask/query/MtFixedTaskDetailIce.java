// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_query.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.query;

public class MtFixedTaskDetailIce extends segimedicaltrans.base.MtTaskBaseRsp
{
    public MtFixedTaskDetailIce()
    {
        super();
    }

    public MtFixedTaskDetailIce(String taskId, String organId, String organName, String transTypeParentCode, String transTypeParentCodeName, String transTypeId, String transTypeName, String fromHouseId, String fromHouseName, String toHouseId, String toHouseName, String patientName, String bedNo, String patientGender, String patientGenderName, String medicalRecNo, String transTools, String transToolsName, String taskContent, String beginTime, String endTime, String exeBeginTime, String exeEndTime, String status, String statusName, String fromHouseLocateType, String fromHouseMac, String toHouseLocateType, String toHouseMac, String exeEndUserId, String sourceHouseId, String sourceHouseName)
    {
        super(taskId, organId, organName, transTypeParentCode, transTypeParentCodeName, transTypeId, transTypeName, fromHouseId, fromHouseName, toHouseId, toHouseName, patientName, bedNo, patientGender, patientGenderName, medicalRecNo, transTools, transToolsName, taskContent, beginTime, endTime, exeBeginTime, exeEndTime, status, statusName, fromHouseLocateType, fromHouseMac, toHouseLocateType, toHouseMac, exeEndUserId, sourceHouseId, sourceHouseName);
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new MtFixedTaskDetailIce();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mttask::query::MtFixedTaskDetailIce",
        "::segimedicaltrans::base::MtTaskBaseRsp"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public MtFixedTaskDetailIce
    clone()
    {
        return (MtFixedTaskDetailIce)super.clone();
    }

    public static final long serialVersionUID = -2029682406L;
}
