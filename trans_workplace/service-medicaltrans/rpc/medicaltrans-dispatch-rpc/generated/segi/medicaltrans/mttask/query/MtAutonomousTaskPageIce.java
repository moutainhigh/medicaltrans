// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_query.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.query;

public class MtAutonomousTaskPageIce extends segimedicaltrans.base.MtConnonPageRsp
{
    public MtAutonomousTaskPageIce()
    {
        super();
        remainTime = "";
    }

    public MtAutonomousTaskPageIce(String taskId, String organId, String organName, String fromHouseId, String fromHouseName, String toHouseId, String toHouseName, String transTypeParentCode, String transTypeParentCodeName, String transTypeId, String transTypeName, String transTools, String transToolsName, String remainTime)
    {
        super(taskId, organId, organName, fromHouseId, fromHouseName, toHouseId, toHouseName, transTypeParentCode, transTypeParentCodeName, transTypeId, transTypeName, transTools, transToolsName);
        this.remainTime = remainTime;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new MtAutonomousTaskPageIce();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mttask::query::MtAutonomousTaskPageIce",
        "::segimedicaltrans::base::MtConnonPageRsp"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeString(remainTime);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        remainTime = __is.readString();
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public String remainTime;

    public String
    getRemainTime()
    {
        return remainTime;
    }

    public void
    setRemainTime(String _remainTime)
    {
        remainTime = _remainTime;
    }

    public MtAutonomousTaskPageIce
    clone()
    {
        return (MtAutonomousTaskPageIce)super.clone();
    }

    public static final long serialVersionUID = 1342250016L;
}
