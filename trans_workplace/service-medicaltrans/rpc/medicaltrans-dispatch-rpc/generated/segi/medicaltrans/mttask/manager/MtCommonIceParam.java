// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.manager;

public class MtCommonIceParam implements java.lang.Cloneable, java.io.Serializable
{
    public String taskId;

    public String
    getTaskId()
    {
        return taskId;
    }

    public void
    setTaskId(String _taskId)
    {
        taskId = _taskId;
    }

    public String houseId;

    public String
    getHouseId()
    {
        return houseId;
    }

    public void
    setHouseId(String _houseId)
    {
        houseId = _houseId;
    }

    public String organId;

    public String
    getOrganId()
    {
        return organId;
    }

    public void
    setOrganId(String _organId)
    {
        organId = _organId;
    }

    public String mac;

    public String
    getMac()
    {
        return mac;
    }

    public void
    setMac(String _mac)
    {
        mac = _mac;
    }

    public String finishFileIds;

    public String
    getFinishFileIds()
    {
        return finishFileIds;
    }

    public void
    setFinishFileIds(String _finishFileIds)
    {
        finishFileIds = _finishFileIds;
    }

    public String taskUserIds;

    public String
    getTaskUserIds()
    {
        return taskUserIds;
    }

    public void
    setTaskUserIds(String _taskUserIds)
    {
        taskUserIds = _taskUserIds;
    }

    public String finishContent;

    public String
    getFinishContent()
    {
        return finishContent;
    }

    public void
    setFinishContent(String _finishContent)
    {
        finishContent = _finishContent;
    }

    public String applyStatus;

    public String
    getApplyStatus()
    {
        return applyStatus;
    }

    public void
    setApplyStatus(String _applyStatus)
    {
        applyStatus = _applyStatus;
    }

    public String dataSource;

    public String
    getDataSource()
    {
        return dataSource;
    }

    public void
    setDataSource(String _dataSource)
    {
        dataSource = _dataSource;
    }

    public String userId;

    public String
    getUserId()
    {
        return userId;
    }

    public void
    setUserId(String _userId)
    {
        userId = _userId;
    }

    public String userOrganId;

    public String
    getUserOrganId()
    {
        return userOrganId;
    }

    public void
    setUserOrganId(String _userOrganId)
    {
        userOrganId = _userOrganId;
    }

    public String evaluate;

    public String
    getEvaluate()
    {
        return evaluate;
    }

    public void
    setEvaluate(String _evaluate)
    {
        evaluate = _evaluate;
    }

    public String evaluateContent;

    public String
    getEvaluateContent()
    {
        return evaluateContent;
    }

    public void
    setEvaluateContent(String _evaluateContent)
    {
        evaluateContent = _evaluateContent;
    }

    public String routeId;

    public String
    getRouteId()
    {
        return routeId;
    }

    public void
    setRouteId(String _routeId)
    {
        routeId = _routeId;
    }

    public String autographFileIds;

    public String
    getAutographFileIds()
    {
        return autographFileIds;
    }

    public void
    setAutographFileIds(String _autographFileIds)
    {
        autographFileIds = _autographFileIds;
    }

    public String photographFileIds;

    public String
    getPhotographFileIds()
    {
        return photographFileIds;
    }

    public void
    setPhotographFileIds(String _photographFileIds)
    {
        photographFileIds = _photographFileIds;
    }

    public String timeOutReason;

    public String
    getTimeOutReason()
    {
        return timeOutReason;
    }

    public void
    setTimeOutReason(String _timeOutReason)
    {
        timeOutReason = _timeOutReason;
    }

    public String backTaskReason;

    public String
    getBackTaskReason()
    {
        return backTaskReason;
    }

    public void
    setBackTaskReason(String _backTaskReason)
    {
        backTaskReason = _backTaskReason;
    }

    public MtCommonIceParam()
    {
        taskId = "";
        houseId = "";
        organId = "";
        mac = "";
        finishFileIds = "";
        taskUserIds = "";
        finishContent = "";
        applyStatus = "";
        dataSource = "";
        userId = "";
        userOrganId = "";
        evaluate = "";
        evaluateContent = "";
        routeId = "";
        autographFileIds = "";
        photographFileIds = "";
        timeOutReason = "";
        backTaskReason = "";
    }

    public MtCommonIceParam(String taskId, String houseId, String organId, String mac, String finishFileIds, String taskUserIds, String finishContent, String applyStatus, String dataSource, String userId, String userOrganId, String evaluate, String evaluateContent, String routeId, String autographFileIds, String photographFileIds, String timeOutReason, String backTaskReason)
    {
        this.taskId = taskId;
        this.houseId = houseId;
        this.organId = organId;
        this.mac = mac;
        this.finishFileIds = finishFileIds;
        this.taskUserIds = taskUserIds;
        this.finishContent = finishContent;
        this.applyStatus = applyStatus;
        this.dataSource = dataSource;
        this.userId = userId;
        this.userOrganId = userOrganId;
        this.evaluate = evaluate;
        this.evaluateContent = evaluateContent;
        this.routeId = routeId;
        this.autographFileIds = autographFileIds;
        this.photographFileIds = photographFileIds;
        this.timeOutReason = timeOutReason;
        this.backTaskReason = backTaskReason;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MtCommonIceParam _r = null;
        if(rhs instanceof MtCommonIceParam)
        {
            _r = (MtCommonIceParam)rhs;
        }

        if(_r != null)
        {
            if(taskId != _r.taskId)
            {
                if(taskId == null || _r.taskId == null || !taskId.equals(_r.taskId))
                {
                    return false;
                }
            }
            if(houseId != _r.houseId)
            {
                if(houseId == null || _r.houseId == null || !houseId.equals(_r.houseId))
                {
                    return false;
                }
            }
            if(organId != _r.organId)
            {
                if(organId == null || _r.organId == null || !organId.equals(_r.organId))
                {
                    return false;
                }
            }
            if(mac != _r.mac)
            {
                if(mac == null || _r.mac == null || !mac.equals(_r.mac))
                {
                    return false;
                }
            }
            if(finishFileIds != _r.finishFileIds)
            {
                if(finishFileIds == null || _r.finishFileIds == null || !finishFileIds.equals(_r.finishFileIds))
                {
                    return false;
                }
            }
            if(taskUserIds != _r.taskUserIds)
            {
                if(taskUserIds == null || _r.taskUserIds == null || !taskUserIds.equals(_r.taskUserIds))
                {
                    return false;
                }
            }
            if(finishContent != _r.finishContent)
            {
                if(finishContent == null || _r.finishContent == null || !finishContent.equals(_r.finishContent))
                {
                    return false;
                }
            }
            if(applyStatus != _r.applyStatus)
            {
                if(applyStatus == null || _r.applyStatus == null || !applyStatus.equals(_r.applyStatus))
                {
                    return false;
                }
            }
            if(dataSource != _r.dataSource)
            {
                if(dataSource == null || _r.dataSource == null || !dataSource.equals(_r.dataSource))
                {
                    return false;
                }
            }
            if(userId != _r.userId)
            {
                if(userId == null || _r.userId == null || !userId.equals(_r.userId))
                {
                    return false;
                }
            }
            if(userOrganId != _r.userOrganId)
            {
                if(userOrganId == null || _r.userOrganId == null || !userOrganId.equals(_r.userOrganId))
                {
                    return false;
                }
            }
            if(evaluate != _r.evaluate)
            {
                if(evaluate == null || _r.evaluate == null || !evaluate.equals(_r.evaluate))
                {
                    return false;
                }
            }
            if(evaluateContent != _r.evaluateContent)
            {
                if(evaluateContent == null || _r.evaluateContent == null || !evaluateContent.equals(_r.evaluateContent))
                {
                    return false;
                }
            }
            if(routeId != _r.routeId)
            {
                if(routeId == null || _r.routeId == null || !routeId.equals(_r.routeId))
                {
                    return false;
                }
            }
            if(autographFileIds != _r.autographFileIds)
            {
                if(autographFileIds == null || _r.autographFileIds == null || !autographFileIds.equals(_r.autographFileIds))
                {
                    return false;
                }
            }
            if(photographFileIds != _r.photographFileIds)
            {
                if(photographFileIds == null || _r.photographFileIds == null || !photographFileIds.equals(_r.photographFileIds))
                {
                    return false;
                }
            }
            if(timeOutReason != _r.timeOutReason)
            {
                if(timeOutReason == null || _r.timeOutReason == null || !timeOutReason.equals(_r.timeOutReason))
                {
                    return false;
                }
            }
            if(backTaskReason != _r.backTaskReason)
            {
                if(backTaskReason == null || _r.backTaskReason == null || !backTaskReason.equals(_r.backTaskReason))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::mttask::manager::MtCommonIceParam");
        __h = IceInternal.HashUtil.hashAdd(__h, taskId);
        __h = IceInternal.HashUtil.hashAdd(__h, houseId);
        __h = IceInternal.HashUtil.hashAdd(__h, organId);
        __h = IceInternal.HashUtil.hashAdd(__h, mac);
        __h = IceInternal.HashUtil.hashAdd(__h, finishFileIds);
        __h = IceInternal.HashUtil.hashAdd(__h, taskUserIds);
        __h = IceInternal.HashUtil.hashAdd(__h, finishContent);
        __h = IceInternal.HashUtil.hashAdd(__h, applyStatus);
        __h = IceInternal.HashUtil.hashAdd(__h, dataSource);
        __h = IceInternal.HashUtil.hashAdd(__h, userId);
        __h = IceInternal.HashUtil.hashAdd(__h, userOrganId);
        __h = IceInternal.HashUtil.hashAdd(__h, evaluate);
        __h = IceInternal.HashUtil.hashAdd(__h, evaluateContent);
        __h = IceInternal.HashUtil.hashAdd(__h, routeId);
        __h = IceInternal.HashUtil.hashAdd(__h, autographFileIds);
        __h = IceInternal.HashUtil.hashAdd(__h, photographFileIds);
        __h = IceInternal.HashUtil.hashAdd(__h, timeOutReason);
        __h = IceInternal.HashUtil.hashAdd(__h, backTaskReason);
        return __h;
    }

    public MtCommonIceParam
    clone()
    {
        MtCommonIceParam c = null;
        try
        {
            c = (MtCommonIceParam)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(taskId);
        __os.writeString(houseId);
        __os.writeString(organId);
        __os.writeString(mac);
        __os.writeString(finishFileIds);
        __os.writeString(taskUserIds);
        __os.writeString(finishContent);
        __os.writeString(applyStatus);
        __os.writeString(dataSource);
        __os.writeString(userId);
        __os.writeString(userOrganId);
        __os.writeString(evaluate);
        __os.writeString(evaluateContent);
        __os.writeString(routeId);
        __os.writeString(autographFileIds);
        __os.writeString(photographFileIds);
        __os.writeString(timeOutReason);
        __os.writeString(backTaskReason);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        taskId = __is.readString();
        houseId = __is.readString();
        organId = __is.readString();
        mac = __is.readString();
        finishFileIds = __is.readString();
        taskUserIds = __is.readString();
        finishContent = __is.readString();
        applyStatus = __is.readString();
        dataSource = __is.readString();
        userId = __is.readString();
        userOrganId = __is.readString();
        evaluate = __is.readString();
        evaluateContent = __is.readString();
        routeId = __is.readString();
        autographFileIds = __is.readString();
        photographFileIds = __is.readString();
        timeOutReason = __is.readString();
        backTaskReason = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, MtCommonIceParam __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public MtCommonIceParam
    __read(IceInternal.BasicStream __is, MtCommonIceParam __v)
    {
        if(__v == null)
        {
             __v = new MtCommonIceParam();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final MtCommonIceParam __nullMarshalValue = new MtCommonIceParam();

    public static final long serialVersionUID = -777308345L;
}
