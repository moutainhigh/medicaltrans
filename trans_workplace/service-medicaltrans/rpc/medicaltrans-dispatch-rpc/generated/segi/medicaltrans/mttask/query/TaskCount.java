// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_query.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.query;

public class TaskCount implements java.lang.Cloneable, java.io.Serializable
{
    public String dispatchTaskCount;

    public String
    getDispatchTaskCount()
    {
        return dispatchTaskCount;
    }

    public void
    setDispatchTaskCount(String _dispatchTaskCount)
    {
        dispatchTaskCount = _dispatchTaskCount;
    }

    public String robTaskCount;

    public String
    getRobTaskCount()
    {
        return robTaskCount;
    }

    public void
    setRobTaskCount(String _robTaskCount)
    {
        robTaskCount = _robTaskCount;
    }

    public String fixedTaskCount;

    public String
    getFixedTaskCount()
    {
        return fixedTaskCount;
    }

    public void
    setFixedTaskCount(String _fixedTaskCount)
    {
        fixedTaskCount = _fixedTaskCount;
    }

    public String autonomousTaskCount;

    public String
    getAutonomousTaskCount()
    {
        return autonomousTaskCount;
    }

    public void
    setAutonomousTaskCount(String _autonomousTaskCount)
    {
        autonomousTaskCount = _autonomousTaskCount;
    }

    public TaskCount()
    {
        dispatchTaskCount = "";
        robTaskCount = "";
        fixedTaskCount = "";
        autonomousTaskCount = "";
    }

    public TaskCount(String dispatchTaskCount, String robTaskCount, String fixedTaskCount, String autonomousTaskCount)
    {
        this.dispatchTaskCount = dispatchTaskCount;
        this.robTaskCount = robTaskCount;
        this.fixedTaskCount = fixedTaskCount;
        this.autonomousTaskCount = autonomousTaskCount;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TaskCount _r = null;
        if(rhs instanceof TaskCount)
        {
            _r = (TaskCount)rhs;
        }

        if(_r != null)
        {
            if(dispatchTaskCount != _r.dispatchTaskCount)
            {
                if(dispatchTaskCount == null || _r.dispatchTaskCount == null || !dispatchTaskCount.equals(_r.dispatchTaskCount))
                {
                    return false;
                }
            }
            if(robTaskCount != _r.robTaskCount)
            {
                if(robTaskCount == null || _r.robTaskCount == null || !robTaskCount.equals(_r.robTaskCount))
                {
                    return false;
                }
            }
            if(fixedTaskCount != _r.fixedTaskCount)
            {
                if(fixedTaskCount == null || _r.fixedTaskCount == null || !fixedTaskCount.equals(_r.fixedTaskCount))
                {
                    return false;
                }
            }
            if(autonomousTaskCount != _r.autonomousTaskCount)
            {
                if(autonomousTaskCount == null || _r.autonomousTaskCount == null || !autonomousTaskCount.equals(_r.autonomousTaskCount))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::mttask::query::TaskCount");
        __h = IceInternal.HashUtil.hashAdd(__h, dispatchTaskCount);
        __h = IceInternal.HashUtil.hashAdd(__h, robTaskCount);
        __h = IceInternal.HashUtil.hashAdd(__h, fixedTaskCount);
        __h = IceInternal.HashUtil.hashAdd(__h, autonomousTaskCount);
        return __h;
    }

    public TaskCount
    clone()
    {
        TaskCount c = null;
        try
        {
            c = (TaskCount)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(dispatchTaskCount);
        __os.writeString(robTaskCount);
        __os.writeString(fixedTaskCount);
        __os.writeString(autonomousTaskCount);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        dispatchTaskCount = __is.readString();
        robTaskCount = __is.readString();
        fixedTaskCount = __is.readString();
        autonomousTaskCount = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, TaskCount __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TaskCount
    __read(IceInternal.BasicStream __is, TaskCount __v)
    {
        if(__v == null)
        {
             __v = new TaskCount();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TaskCount __nullMarshalValue = new TaskCount();

    public static final long serialVersionUID = -1768075391L;
}
