// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.manager;

/**
 * Provides type-specific helper functions.
 **/
public final class MtTaskManagerCreateServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements MtTaskManagerCreateServiceIcePrx
{
    private static final String __againDispatchTask_name = "againDispatchTask";

    public resp.RpcRespIce againDispatchTask(SendTaskIceParam sendTaskIceParam)
    {
        return againDispatchTask(sendTaskIceParam, null, false);
    }

    public resp.RpcRespIce againDispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx)
    {
        return againDispatchTask(sendTaskIceParam, __ctx, true);
    }

    private resp.RpcRespIce againDispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__againDispatchTask_name);
        return end_againDispatchTask(begin_againDispatchTask(sendTaskIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam)
    {
        return begin_againDispatchTask(sendTaskIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_againDispatchTask(sendTaskIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, Ice.Callback __cb)
    {
        return begin_againDispatchTask(sendTaskIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_againDispatchTask(sendTaskIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, Callback_MtTaskManagerCreateServiceIce_againDispatchTask __cb)
    {
        return begin_againDispatchTask(sendTaskIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerCreateServiceIce_againDispatchTask __cb)
    {
        return begin_againDispatchTask(sendTaskIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, 
                                                   IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_againDispatchTask(sendTaskIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, 
                                                   IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_againDispatchTask(sendTaskIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_againDispatchTask(sendTaskIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_againDispatchTask(sendTaskIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_againDispatchTask(sendTaskIceParam, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   MtTaskManagerCreateServiceIcePrxHelper.__againDispatchTask_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_againDispatchTask(SendTaskIceParam sendTaskIceParam, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__againDispatchTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__againDispatchTask_name, __cb);
        try
        {
            __result.prepare(__againDispatchTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            SendTaskIceParam.__write(__os, sendTaskIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_againDispatchTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __againDispatchTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __againDispatchTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_againDispatchTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __againFixedTask_name = "againFixedTask";

    public resp.RpcRespIce againFixedTask(SendTaskIceParam sendTaskIceParam)
    {
        return againFixedTask(sendTaskIceParam, null, false);
    }

    public resp.RpcRespIce againFixedTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx)
    {
        return againFixedTask(sendTaskIceParam, __ctx, true);
    }

    private resp.RpcRespIce againFixedTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__againFixedTask_name);
        return end_againFixedTask(begin_againFixedTask(sendTaskIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam)
    {
        return begin_againFixedTask(sendTaskIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_againFixedTask(sendTaskIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, Ice.Callback __cb)
    {
        return begin_againFixedTask(sendTaskIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_againFixedTask(sendTaskIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, Callback_MtTaskManagerCreateServiceIce_againFixedTask __cb)
    {
        return begin_againFixedTask(sendTaskIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerCreateServiceIce_againFixedTask __cb)
    {
        return begin_againFixedTask(sendTaskIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_againFixedTask(sendTaskIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_againFixedTask(sendTaskIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_againFixedTask(sendTaskIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_againFixedTask(sendTaskIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_againFixedTask(sendTaskIceParam, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                MtTaskManagerCreateServiceIcePrxHelper.__againFixedTask_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_againFixedTask(SendTaskIceParam sendTaskIceParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__againFixedTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__againFixedTask_name, __cb);
        try
        {
            __result.prepare(__againFixedTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            SendTaskIceParam.__write(__os, sendTaskIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_againFixedTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __againFixedTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __againFixedTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_againFixedTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createFixedTask_name = "createFixedTask";

    public resp.RpcRespIce createFixedTask(MtFixedTaskParam param)
    {
        return createFixedTask(param, null, false);
    }

    public resp.RpcRespIce createFixedTask(MtFixedTaskParam param, java.util.Map<String, String> __ctx)
    {
        return createFixedTask(param, __ctx, true);
    }

    private resp.RpcRespIce createFixedTask(MtFixedTaskParam param, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__createFixedTask_name);
        return end_createFixedTask(begin_createFixedTask(param, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param)
    {
        return begin_createFixedTask(param, null, false, false, null);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, java.util.Map<String, String> __ctx)
    {
        return begin_createFixedTask(param, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, Ice.Callback __cb)
    {
        return begin_createFixedTask(param, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createFixedTask(param, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, Callback_MtTaskManagerCreateServiceIce_createFixedTask __cb)
    {
        return begin_createFixedTask(param, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, java.util.Map<String, String> __ctx, Callback_MtTaskManagerCreateServiceIce_createFixedTask __cb)
    {
        return begin_createFixedTask(param, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createFixedTask(param, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createFixedTask(param, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createFixedTask(param, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createFixedTask(param, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createFixedTask(param, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 MtTaskManagerCreateServiceIcePrxHelper.__createFixedTask_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_createFixedTask(MtFixedTaskParam param, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createFixedTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createFixedTask_name, __cb);
        try
        {
            __result.prepare(__createFixedTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtFixedTaskParam.__write(__os, param);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_createFixedTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createFixedTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createFixedTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_createFixedTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createTask_name = "createTask";

    public resp.RpcRespIce createTask(MtTaskReq param)
    {
        return createTask(param, null, false);
    }

    public resp.RpcRespIce createTask(MtTaskReq param, java.util.Map<String, String> __ctx)
    {
        return createTask(param, __ctx, true);
    }

    private resp.RpcRespIce createTask(MtTaskReq param, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__createTask_name);
        return end_createTask(begin_createTask(param, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param)
    {
        return begin_createTask(param, null, false, false, null);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, java.util.Map<String, String> __ctx)
    {
        return begin_createTask(param, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, Ice.Callback __cb)
    {
        return begin_createTask(param, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createTask(param, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, Callback_MtTaskManagerCreateServiceIce_createTask __cb)
    {
        return begin_createTask(param, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, java.util.Map<String, String> __ctx, Callback_MtTaskManagerCreateServiceIce_createTask __cb)
    {
        return begin_createTask(param, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createTask(param, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createTask(param, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createTask(param, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createTask(MtTaskReq param, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createTask(param, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createTask(MtTaskReq param, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createTask(param, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            MtTaskManagerCreateServiceIcePrxHelper.__createTask_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_createTask(MtTaskReq param, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createTask_name, __cb);
        try
        {
            __result.prepare(__createTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtTaskReq.__write(__os, param);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_createTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_createTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __dispatchTask_name = "dispatchTask";

    public resp.RpcRespIce dispatchTask(SendTaskIceParam sendTaskIceParam)
    {
        return dispatchTask(sendTaskIceParam, null, false);
    }

    public resp.RpcRespIce dispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx)
    {
        return dispatchTask(sendTaskIceParam, __ctx, true);
    }

    private resp.RpcRespIce dispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__dispatchTask_name);
        return end_dispatchTask(begin_dispatchTask(sendTaskIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam)
    {
        return begin_dispatchTask(sendTaskIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_dispatchTask(sendTaskIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, Ice.Callback __cb)
    {
        return begin_dispatchTask(sendTaskIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dispatchTask(sendTaskIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, Callback_MtTaskManagerCreateServiceIce_dispatchTask __cb)
    {
        return begin_dispatchTask(sendTaskIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerCreateServiceIce_dispatchTask __cb)
    {
        return begin_dispatchTask(sendTaskIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dispatchTask(sendTaskIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dispatchTask(sendTaskIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dispatchTask(sendTaskIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dispatchTask(sendTaskIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dispatchTask(sendTaskIceParam, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              MtTaskManagerCreateServiceIcePrxHelper.__dispatchTask_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_dispatchTask(SendTaskIceParam sendTaskIceParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dispatchTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__dispatchTask_name, __cb);
        try
        {
            __result.prepare(__dispatchTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            SendTaskIceParam.__write(__os, sendTaskIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_dispatchTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __dispatchTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __dispatchTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_dispatchTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __editTask_name = "editTask";

    public resp.RpcRespIce editTask(MtTaskReq param)
    {
        return editTask(param, null, false);
    }

    public resp.RpcRespIce editTask(MtTaskReq param, java.util.Map<String, String> __ctx)
    {
        return editTask(param, __ctx, true);
    }

    private resp.RpcRespIce editTask(MtTaskReq param, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__editTask_name);
        return end_editTask(begin_editTask(param, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param)
    {
        return begin_editTask(param, null, false, false, null);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, java.util.Map<String, String> __ctx)
    {
        return begin_editTask(param, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, Ice.Callback __cb)
    {
        return begin_editTask(param, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_editTask(param, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, Callback_MtTaskManagerCreateServiceIce_editTask __cb)
    {
        return begin_editTask(param, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, java.util.Map<String, String> __ctx, Callback_MtTaskManagerCreateServiceIce_editTask __cb)
    {
        return begin_editTask(param, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_editTask(param, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_editTask(param, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_editTask(param, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_editTask(MtTaskReq param, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_editTask(param, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_editTask(MtTaskReq param, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_editTask(param, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          MtTaskManagerCreateServiceIcePrxHelper.__editTask_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_editTask(MtTaskReq param, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__editTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__editTask_name, __cb);
        try
        {
            __result.prepare(__editTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtTaskReq.__write(__os, param);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_editTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __editTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __editTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerCreateServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_editTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerCreateServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MtTaskManagerCreateServiceIcePrx.class, MtTaskManagerCreateServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerCreateServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MtTaskManagerCreateServiceIcePrx.class, MtTaskManagerCreateServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerCreateServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MtTaskManagerCreateServiceIcePrx.class, MtTaskManagerCreateServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerCreateServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MtTaskManagerCreateServiceIcePrx.class, MtTaskManagerCreateServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MtTaskManagerCreateServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MtTaskManagerCreateServiceIcePrx.class, MtTaskManagerCreateServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MtTaskManagerCreateServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MtTaskManagerCreateServiceIcePrx.class, MtTaskManagerCreateServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mttask::manager::MtTaskManagerCreateServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MtTaskManagerCreateServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MtTaskManagerCreateServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MtTaskManagerCreateServiceIcePrxHelper result = new MtTaskManagerCreateServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
