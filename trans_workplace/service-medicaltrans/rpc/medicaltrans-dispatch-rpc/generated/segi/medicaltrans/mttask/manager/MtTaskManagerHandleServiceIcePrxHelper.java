// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.manager;

/**
 * Provides type-specific helper functions.
 **/
public final class MtTaskManagerHandleServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements MtTaskManagerHandleServiceIcePrx
{
    private static final String __applyPersonLiable_name = "applyPersonLiable";

    public MtTaskApplyPersonLiableRsp applyPersonLiable(MtCommonIceParam mtCommonIceParam)
    {
        return applyPersonLiable(mtCommonIceParam, null, false);
    }

    public MtTaskApplyPersonLiableRsp applyPersonLiable(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return applyPersonLiable(mtCommonIceParam, __ctx, true);
    }

    private MtTaskApplyPersonLiableRsp applyPersonLiable(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__applyPersonLiable_name);
        return end_applyPersonLiable(begin_applyPersonLiable(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam)
    {
        return begin_applyPersonLiable(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_applyPersonLiable(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_applyPersonLiable __cb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_applyPersonLiable __cb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, 
                                                   IceInternal.Functional_GenericCallback1<MtTaskApplyPersonLiableRsp> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, 
                                                   IceInternal.Functional_GenericCallback1<MtTaskApplyPersonLiableRsp> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<MtTaskApplyPersonLiableRsp> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<MtTaskApplyPersonLiableRsp> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<MtTaskApplyPersonLiableRsp> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_applyPersonLiable(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.mttask.manager.MtTaskApplyPersonLiableRsp>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   MtTaskManagerHandleServiceIcePrxHelper.__applyPersonLiable_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_applyPersonLiable(MtCommonIceParam mtCommonIceParam, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__applyPersonLiable_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__applyPersonLiable_name, __cb);
        try
        {
            __result.prepare(__applyPersonLiable_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public MtTaskApplyPersonLiableRsp end_applyPersonLiable(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __applyPersonLiable_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            MtTaskApplyPersonLiableRsp __ret = null;
            __ret = MtTaskApplyPersonLiableRsp.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __applyPersonLiable_completed(Ice.TwowayCallbackArg1<MtTaskApplyPersonLiableRsp> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        MtTaskApplyPersonLiableRsp __ret = null;
        try
        {
            __ret = __proxy.end_applyPersonLiable(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __autograph_name = "autograph";

    public resp.RpcRespIce autograph(MtCommonIceParam mtCommonIceParam)
    {
        return autograph(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce autograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return autograph(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce autograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__autograph_name);
        return end_autograph(begin_autograph(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam)
    {
        return begin_autograph(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_autograph(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_autograph(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_autograph(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_autograph __cb)
    {
        return begin_autograph(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_autograph __cb)
    {
        return begin_autograph(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, 
                                           IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_autograph(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, 
                                           IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_autograph(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_autograph(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_autograph(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_autograph(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           MtTaskManagerHandleServiceIcePrxHelper.__autograph_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_autograph(MtCommonIceParam mtCommonIceParam, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__autograph_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__autograph_name, __cb);
        try
        {
            __result.prepare(__autograph_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_autograph(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __autograph_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __autograph_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_autograph(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __backMtTask_name = "backMtTask";

    public resp.RpcRespIce backMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return backMtTask(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce backMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return backMtTask(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce backMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__backMtTask_name);
        return end_backMtTask(begin_backMtTask(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return begin_backMtTask(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_backMtTask(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_backMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_backMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_backMtTask __cb)
    {
        return begin_backMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_backMtTask __cb)
    {
        return begin_backMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_backMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_backMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_backMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_backMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_backMtTask(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            MtTaskManagerHandleServiceIcePrxHelper.__backMtTask_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_backMtTask(MtCommonIceParam mtCommonIceParam, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__backMtTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__backMtTask_name, __cb);
        try
        {
            __result.prepare(__backMtTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_backMtTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __backMtTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __backMtTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_backMtTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __cancelMtTask_name = "cancelMtTask";

    public resp.RpcRespIce cancelMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return cancelMtTask(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce cancelMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return cancelMtTask(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce cancelMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__cancelMtTask_name);
        return end_cancelMtTask(begin_cancelMtTask(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return begin_cancelMtTask(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_cancelMtTask(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_cancelMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cancelMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_cancelMtTask __cb)
    {
        return begin_cancelMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_cancelMtTask __cb)
    {
        return begin_cancelMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_cancelMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_cancelMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_cancelMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_cancelMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_cancelMtTask(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              MtTaskManagerHandleServiceIcePrxHelper.__cancelMtTask_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_cancelMtTask(MtCommonIceParam mtCommonIceParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__cancelMtTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__cancelMtTask_name, __cb);
        try
        {
            __result.prepare(__cancelMtTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_cancelMtTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __cancelMtTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __cancelMtTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_cancelMtTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __evaluate_name = "evaluate";

    public resp.RpcRespIce evaluate(MtCommonIceParam mtCommonIceParam)
    {
        return evaluate(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce evaluate(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return evaluate(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce evaluate(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__evaluate_name);
        return end_evaluate(begin_evaluate(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam)
    {
        return begin_evaluate(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_evaluate(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_evaluate(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_evaluate(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_evaluate __cb)
    {
        return begin_evaluate(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_evaluate __cb)
    {
        return begin_evaluate(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_evaluate(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_evaluate(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_evaluate(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_evaluate(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_evaluate(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          MtTaskManagerHandleServiceIcePrxHelper.__evaluate_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_evaluate(MtCommonIceParam mtCommonIceParam, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__evaluate_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__evaluate_name, __cb);
        try
        {
            __result.prepare(__evaluate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_evaluate(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __evaluate_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __evaluate_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_evaluate(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __finishFixedTask_name = "finishFixedTask";

    public resp.RpcRespIce finishFixedTask(MtCommonIceParam mtCommonIceParam)
    {
        return finishFixedTask(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce finishFixedTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return finishFixedTask(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce finishFixedTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__finishFixedTask_name);
        return end_finishFixedTask(begin_finishFixedTask(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam)
    {
        return begin_finishFixedTask(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_finishFixedTask(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_finishFixedTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_finishFixedTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_finishFixedTask __cb)
    {
        return begin_finishFixedTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_finishFixedTask __cb)
    {
        return begin_finishFixedTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_finishFixedTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishFixedTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_finishFixedTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishFixedTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishFixedTask(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 MtTaskManagerHandleServiceIcePrxHelper.__finishFixedTask_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_finishFixedTask(MtCommonIceParam mtCommonIceParam, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__finishFixedTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__finishFixedTask_name, __cb);
        try
        {
            __result.prepare(__finishFixedTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_finishFixedTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __finishFixedTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __finishFixedTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_finishFixedTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __finishMtTask_name = "finishMtTask";

    public resp.RpcRespIce finishMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return finishMtTask(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce finishMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return finishMtTask(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce finishMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__finishMtTask_name);
        return end_finishMtTask(begin_finishMtTask(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return begin_finishMtTask(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_finishMtTask(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_finishMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_finishMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_finishMtTask __cb)
    {
        return begin_finishMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_finishMtTask __cb)
    {
        return begin_finishMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_finishMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_finishMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishMtTask(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              MtTaskManagerHandleServiceIcePrxHelper.__finishMtTask_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_finishMtTask(MtCommonIceParam mtCommonIceParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__finishMtTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__finishMtTask_name, __cb);
        try
        {
            __result.prepare(__finishMtTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_finishMtTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __finishMtTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __finishMtTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_finishMtTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __finishTaskForWeb_name = "finishTaskForWeb";

    public resp.RpcRespIce finishTaskForWeb(MtCommonIceParam mtCommonIceParam)
    {
        return finishTaskForWeb(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce finishTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return finishTaskForWeb(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce finishTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__finishTaskForWeb_name);
        return end_finishTaskForWeb(begin_finishTaskForWeb(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_finishTaskForWeb __cb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_finishTaskForWeb __cb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_finishTaskForWeb(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  MtTaskManagerHandleServiceIcePrxHelper.__finishTaskForWeb_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_finishTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__finishTaskForWeb_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__finishTaskForWeb_name, __cb);
        try
        {
            __result.prepare(__finishTaskForWeb_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_finishTaskForWeb(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __finishTaskForWeb_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __finishTaskForWeb_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_finishTaskForWeb(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __grabMtDispatchTask_name = "grabMtDispatchTask";

    public MtTaskGrabRsp grabMtDispatchTask(MtCommonIceParam mtCommonIceParam)
    {
        return grabMtDispatchTask(mtCommonIceParam, null, false);
    }

    public MtTaskGrabRsp grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return grabMtDispatchTask(mtCommonIceParam, __ctx, true);
    }

    private MtTaskGrabRsp grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__grabMtDispatchTask_name);
        return end_grabMtDispatchTask(begin_grabMtDispatchTask(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_grabMtDispatchTask __cb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_grabMtDispatchTask __cb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, 
                                                    IceInternal.Functional_GenericCallback1<MtTaskGrabRsp> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, 
                                                    IceInternal.Functional_GenericCallback1<MtTaskGrabRsp> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<MtTaskGrabRsp> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<MtTaskGrabRsp> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<MtTaskGrabRsp> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_grabMtDispatchTask(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.mttask.manager.MtTaskGrabRsp>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    MtTaskManagerHandleServiceIcePrxHelper.__grabMtDispatchTask_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_grabMtDispatchTask(MtCommonIceParam mtCommonIceParam, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__grabMtDispatchTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__grabMtDispatchTask_name, __cb);
        try
        {
            __result.prepare(__grabMtDispatchTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public MtTaskGrabRsp end_grabMtDispatchTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __grabMtDispatchTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            MtTaskGrabRsp __ret = null;
            __ret = MtTaskGrabRsp.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __grabMtDispatchTask_completed(Ice.TwowayCallbackArg1<MtTaskGrabRsp> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        MtTaskGrabRsp __ret = null;
        try
        {
            __ret = __proxy.end_grabMtDispatchTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __photograph_name = "photograph";

    public resp.RpcRespIce photograph(MtCommonIceParam mtCommonIceParam)
    {
        return photograph(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce photograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return photograph(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce photograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__photograph_name);
        return end_photograph(begin_photograph(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam)
    {
        return begin_photograph(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_photograph(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_photograph(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_photograph(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_photograph __cb)
    {
        return begin_photograph(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_photograph __cb)
    {
        return begin_photograph(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_photograph(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_photograph(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_photograph(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_photograph(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_photograph(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            MtTaskManagerHandleServiceIcePrxHelper.__photograph_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_photograph(MtCommonIceParam mtCommonIceParam, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__photograph_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__photograph_name, __cb);
        try
        {
            __result.prepare(__photograph_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_photograph(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __photograph_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __photograph_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_photograph(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __startMtTask_name = "startMtTask";

    public resp.RpcRespIce startMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return startMtTask(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce startMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return startMtTask(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce startMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__startMtTask_name);
        return end_startMtTask(begin_startMtTask(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return begin_startMtTask(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_startMtTask(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_startMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_startMtTask __cb)
    {
        return begin_startMtTask(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_startMtTask __cb)
    {
        return begin_startMtTask(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startMtTask(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startMtTask(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startMtTask(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             MtTaskManagerHandleServiceIcePrxHelper.__startMtTask_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_startMtTask(MtCommonIceParam mtCommonIceParam, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startMtTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__startMtTask_name, __cb);
        try
        {
            __result.prepare(__startMtTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_startMtTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __startMtTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __startMtTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_startMtTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __startTaskForWeb_name = "startTaskForWeb";

    public resp.RpcRespIce startTaskForWeb(MtCommonIceParam mtCommonIceParam)
    {
        return startTaskForWeb(mtCommonIceParam, null, false);
    }

    public resp.RpcRespIce startTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return startTaskForWeb(mtCommonIceParam, __ctx, true);
    }

    private resp.RpcRespIce startTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__startTaskForWeb_name);
        return end_startTaskForWeb(begin_startTaskForWeb(mtCommonIceParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam)
    {
        return begin_startTaskForWeb(mtCommonIceParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx)
    {
        return begin_startTaskForWeb(mtCommonIceParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, Ice.Callback __cb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, Callback_MtTaskManagerHandleServiceIce_startTaskForWeb __cb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, java.util.Map<String, String> __ctx, Callback_MtTaskManagerHandleServiceIce_startTaskForWeb __cb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startTaskForWeb(mtCommonIceParam, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 MtTaskManagerHandleServiceIcePrxHelper.__startTaskForWeb_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_startTaskForWeb(MtCommonIceParam mtCommonIceParam, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startTaskForWeb_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__startTaskForWeb_name, __cb);
        try
        {
            __result.prepare(__startTaskForWeb_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            MtCommonIceParam.__write(__os, mtCommonIceParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_startTaskForWeb(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __startTaskForWeb_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __startTaskForWeb_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx __proxy = (segi.medicaltrans.mttask.manager.MtTaskManagerHandleServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_startTaskForWeb(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerHandleServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MtTaskManagerHandleServiceIcePrx.class, MtTaskManagerHandleServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerHandleServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MtTaskManagerHandleServiceIcePrx.class, MtTaskManagerHandleServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerHandleServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MtTaskManagerHandleServiceIcePrx.class, MtTaskManagerHandleServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskManagerHandleServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MtTaskManagerHandleServiceIcePrx.class, MtTaskManagerHandleServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MtTaskManagerHandleServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MtTaskManagerHandleServiceIcePrx.class, MtTaskManagerHandleServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MtTaskManagerHandleServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MtTaskManagerHandleServiceIcePrx.class, MtTaskManagerHandleServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mttask::manager::MtTaskManagerHandleServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MtTaskManagerHandleServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MtTaskManagerHandleServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MtTaskManagerHandleServiceIcePrxHelper result = new MtTaskManagerHandleServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
