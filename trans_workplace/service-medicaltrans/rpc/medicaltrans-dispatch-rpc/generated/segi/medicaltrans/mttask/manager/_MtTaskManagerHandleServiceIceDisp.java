// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.manager;

public abstract class _MtTaskManagerHandleServiceIceDisp extends Ice.ObjectImpl implements MtTaskManagerHandleServiceIce
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mttask::manager::MtTaskManagerHandleServiceIce"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final MtTaskApplyPersonLiableRsp applyPersonLiable(MtCommonIceParam mtCommonIceParam)
    {
        return applyPersonLiable(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce autograph(MtCommonIceParam mtCommonIceParam)
    {
        return autograph(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce backMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return backMtTask(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce cancelMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return cancelMtTask(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce evaluate(MtCommonIceParam mtCommonIceParam)
    {
        return evaluate(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce finishFixedTask(MtCommonIceParam mtCommonIceParam)
    {
        return finishFixedTask(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce finishMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return finishMtTask(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce finishTaskForWeb(MtCommonIceParam mtCommonIceParam)
    {
        return finishTaskForWeb(mtCommonIceParam, null);
    }

    public final MtTaskGrabRsp grabMtDispatchTask(MtCommonIceParam mtCommonIceParam)
    {
        return grabMtDispatchTask(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce photograph(MtCommonIceParam mtCommonIceParam)
    {
        return photograph(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce startMtTask(MtCommonIceParam mtCommonIceParam)
    {
        return startMtTask(mtCommonIceParam, null);
    }

    public final resp.RpcRespIce startTaskForWeb(MtCommonIceParam mtCommonIceParam)
    {
        return startTaskForWeb(mtCommonIceParam, null);
    }

    public static Ice.DispatchStatus ___finishFixedTask(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.finishFixedTask(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___autograph(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.autograph(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___evaluate(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.evaluate(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___grabMtDispatchTask(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        MtTaskGrabRsp __ret = __obj.grabMtDispatchTask(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskGrabRsp.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___applyPersonLiable(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        MtTaskApplyPersonLiableRsp __ret = __obj.applyPersonLiable(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskApplyPersonLiableRsp.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___backMtTask(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.backMtTask(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startMtTask(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.startMtTask(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___cancelMtTask(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.cancelMtTask(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___finishMtTask(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.finishMtTask(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startTaskForWeb(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.startTaskForWeb(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___finishTaskForWeb(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.finishTaskForWeb(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___photograph(MtTaskManagerHandleServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtCommonIceParam mtCommonIceParam = null;
        mtCommonIceParam = MtCommonIceParam.__read(__is, mtCommonIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.photograph(mtCommonIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "applyPersonLiable",
        "autograph",
        "backMtTask",
        "cancelMtTask",
        "evaluate",
        "finishFixedTask",
        "finishMtTask",
        "finishTaskForWeb",
        "grabMtDispatchTask",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "photograph",
        "startMtTask",
        "startTaskForWeb"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___applyPersonLiable(this, in, __current);
            }
            case 1:
            {
                return ___autograph(this, in, __current);
            }
            case 2:
            {
                return ___backMtTask(this, in, __current);
            }
            case 3:
            {
                return ___cancelMtTask(this, in, __current);
            }
            case 4:
            {
                return ___evaluate(this, in, __current);
            }
            case 5:
            {
                return ___finishFixedTask(this, in, __current);
            }
            case 6:
            {
                return ___finishMtTask(this, in, __current);
            }
            case 7:
            {
                return ___finishTaskForWeb(this, in, __current);
            }
            case 8:
            {
                return ___grabMtDispatchTask(this, in, __current);
            }
            case 9:
            {
                return ___ice_id(this, in, __current);
            }
            case 10:
            {
                return ___ice_ids(this, in, __current);
            }
            case 11:
            {
                return ___ice_isA(this, in, __current);
            }
            case 12:
            {
                return ___ice_ping(this, in, __current);
            }
            case 13:
            {
                return ___photograph(this, in, __current);
            }
            case 14:
            {
                return ___startMtTask(this, in, __current);
            }
            case 15:
            {
                return ___startTaskForWeb(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
