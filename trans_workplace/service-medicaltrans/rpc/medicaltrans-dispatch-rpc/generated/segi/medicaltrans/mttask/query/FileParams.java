// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_query.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.query;

public class FileParams implements java.lang.Cloneable, java.io.Serializable
{
    public String fileId;

    public String
    getFileId()
    {
        return fileId;
    }

    public void
    setFileId(String _fileId)
    {
        fileId = _fileId;
    }

    public String refType;

    public String
    getRefType()
    {
        return refType;
    }

    public void
    setRefType(String _refType)
    {
        refType = _refType;
    }

    public String refId;

    public String
    getRefId()
    {
        return refId;
    }

    public void
    setRefId(String _refId)
    {
        refId = _refId;
    }

    public String fileName;

    public String
    getFileName()
    {
        return fileName;
    }

    public void
    setFileName(String _fileName)
    {
        fileName = _fileName;
    }

    public String reqFileUrl;

    public String
    getReqFileUrl()
    {
        return reqFileUrl;
    }

    public void
    setReqFileUrl(String _reqFileUrl)
    {
        reqFileUrl = _reqFileUrl;
    }

    public String narrowFileUrl;

    public String
    getNarrowFileUrl()
    {
        return narrowFileUrl;
    }

    public void
    setNarrowFileUrl(String _narrowFileUrl)
    {
        narrowFileUrl = _narrowFileUrl;
    }

    public String fileSize;

    public String
    getFileSize()
    {
        return fileSize;
    }

    public void
    setFileSize(String _fileSize)
    {
        fileSize = _fileSize;
    }

    public FileParams()
    {
        fileId = "";
        refType = "";
        refId = "";
        fileName = "";
        reqFileUrl = "";
        narrowFileUrl = "";
        fileSize = "";
    }

    public FileParams(String fileId, String refType, String refId, String fileName, String reqFileUrl, String narrowFileUrl, String fileSize)
    {
        this.fileId = fileId;
        this.refType = refType;
        this.refId = refId;
        this.fileName = fileName;
        this.reqFileUrl = reqFileUrl;
        this.narrowFileUrl = narrowFileUrl;
        this.fileSize = fileSize;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FileParams _r = null;
        if(rhs instanceof FileParams)
        {
            _r = (FileParams)rhs;
        }

        if(_r != null)
        {
            if(fileId != _r.fileId)
            {
                if(fileId == null || _r.fileId == null || !fileId.equals(_r.fileId))
                {
                    return false;
                }
            }
            if(refType != _r.refType)
            {
                if(refType == null || _r.refType == null || !refType.equals(_r.refType))
                {
                    return false;
                }
            }
            if(refId != _r.refId)
            {
                if(refId == null || _r.refId == null || !refId.equals(_r.refId))
                {
                    return false;
                }
            }
            if(fileName != _r.fileName)
            {
                if(fileName == null || _r.fileName == null || !fileName.equals(_r.fileName))
                {
                    return false;
                }
            }
            if(reqFileUrl != _r.reqFileUrl)
            {
                if(reqFileUrl == null || _r.reqFileUrl == null || !reqFileUrl.equals(_r.reqFileUrl))
                {
                    return false;
                }
            }
            if(narrowFileUrl != _r.narrowFileUrl)
            {
                if(narrowFileUrl == null || _r.narrowFileUrl == null || !narrowFileUrl.equals(_r.narrowFileUrl))
                {
                    return false;
                }
            }
            if(fileSize != _r.fileSize)
            {
                if(fileSize == null || _r.fileSize == null || !fileSize.equals(_r.fileSize))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::mttask::query::FileParams");
        __h = IceInternal.HashUtil.hashAdd(__h, fileId);
        __h = IceInternal.HashUtil.hashAdd(__h, refType);
        __h = IceInternal.HashUtil.hashAdd(__h, refId);
        __h = IceInternal.HashUtil.hashAdd(__h, fileName);
        __h = IceInternal.HashUtil.hashAdd(__h, reqFileUrl);
        __h = IceInternal.HashUtil.hashAdd(__h, narrowFileUrl);
        __h = IceInternal.HashUtil.hashAdd(__h, fileSize);
        return __h;
    }

    public FileParams
    clone()
    {
        FileParams c = null;
        try
        {
            c = (FileParams)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(fileId);
        __os.writeString(refType);
        __os.writeString(refId);
        __os.writeString(fileName);
        __os.writeString(reqFileUrl);
        __os.writeString(narrowFileUrl);
        __os.writeString(fileSize);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        fileId = __is.readString();
        refType = __is.readString();
        refId = __is.readString();
        fileName = __is.readString();
        reqFileUrl = __is.readString();
        narrowFileUrl = __is.readString();
        fileSize = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, FileParams __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public FileParams
    __read(IceInternal.BasicStream __is, FileParams __v)
    {
        if(__v == null)
        {
             __v = new FileParams();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final FileParams __nullMarshalValue = new FileParams();

    public static final long serialVersionUID = 1171110860L;
}
