// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `organMonthAmount.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.report.organmonth;

/**
 * Provides type-specific helper functions.
 **/
public final class OrganMonthAmountServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements OrganMonthAmountServiceIcePrx
{
    private static final String __getTransProfile_name = "getTransProfile";

    public TransProfileReturnIce getTransProfile(String organId, String cycleY)
    {
        return getTransProfile(organId, cycleY, null, false);
    }

    public TransProfileReturnIce getTransProfile(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return getTransProfile(organId, cycleY, __ctx, true);
    }

    private TransProfileReturnIce getTransProfile(String organId, String cycleY, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getTransProfile_name);
        return end_getTransProfile(begin_getTransProfile(organId, cycleY, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, String cycleY)
    {
        return begin_getTransProfile(organId, cycleY, null, false, false, null);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return begin_getTransProfile(organId, cycleY, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, String cycleY, Ice.Callback __cb)
    {
        return begin_getTransProfile(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, String cycleY, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTransProfile(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, String cycleY, Callback_OrganMonthAmountServiceIce_getTransProfile __cb)
    {
        return begin_getTransProfile(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, String cycleY, java.util.Map<String, String> __ctx, Callback_OrganMonthAmountServiceIce_getTransProfile __cb)
    {
        return begin_getTransProfile(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, 
                                                 String cycleY, 
                                                 IceInternal.Functional_GenericCallback1<TransProfileReturnIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTransProfile(organId, cycleY, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, 
                                                 String cycleY, 
                                                 IceInternal.Functional_GenericCallback1<TransProfileReturnIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransProfile(organId, cycleY, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, 
                                                 String cycleY, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<TransProfileReturnIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTransProfile(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTransProfile(String organId, 
                                                 String cycleY, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<TransProfileReturnIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransProfile(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getTransProfile(String organId, 
                                                  String cycleY, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<TransProfileReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransProfile(organId, cycleY, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.organmonth.TransProfileReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 OrganMonthAmountServiceIcePrxHelper.__getTransProfile_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getTransProfile(String organId, 
                                                  String cycleY, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTransProfile_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getTransProfile_name, __cb);
        try
        {
            __result.prepare(__getTransProfile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(organId);
            __os.writeString(cycleY);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransProfileReturnIce end_getTransProfile(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getTransProfile_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransProfileReturnIce __ret = null;
            __ret = TransProfileReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getTransProfile_completed(Ice.TwowayCallbackArg1<TransProfileReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx __proxy = (segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx)__result.getProxy();
        TransProfileReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_getTransProfile(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryAmountMonth_name = "queryAmountMonth";

    public OrganMonthAmontReturnIce queryAmountMonth(String organId, String cycleY)
    {
        return queryAmountMonth(organId, cycleY, null, false);
    }

    public OrganMonthAmontReturnIce queryAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return queryAmountMonth(organId, cycleY, __ctx, true);
    }

    private OrganMonthAmontReturnIce queryAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryAmountMonth_name);
        return end_queryAmountMonth(begin_queryAmountMonth(organId, cycleY, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, String cycleY)
    {
        return begin_queryAmountMonth(organId, cycleY, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return begin_queryAmountMonth(organId, cycleY, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, String cycleY, Ice.Callback __cb)
    {
        return begin_queryAmountMonth(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryAmountMonth(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, String cycleY, Callback_OrganMonthAmountServiceIce_queryAmountMonth __cb)
    {
        return begin_queryAmountMonth(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, Callback_OrganMonthAmountServiceIce_queryAmountMonth __cb)
    {
        return begin_queryAmountMonth(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, 
                                                  String cycleY, 
                                                  IceInternal.Functional_GenericCallback1<OrganMonthAmontReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryAmountMonth(organId, cycleY, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, 
                                                  String cycleY, 
                                                  IceInternal.Functional_GenericCallback1<OrganMonthAmontReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryAmountMonth(organId, cycleY, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, 
                                                  String cycleY, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<OrganMonthAmontReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryAmountMonth(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryAmountMonth(String organId, 
                                                  String cycleY, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<OrganMonthAmontReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryAmountMonth(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryAmountMonth(String organId, 
                                                   String cycleY, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<OrganMonthAmontReturnIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryAmountMonth(organId, cycleY, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.organmonth.OrganMonthAmontReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  OrganMonthAmountServiceIcePrxHelper.__queryAmountMonth_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_queryAmountMonth(String organId, 
                                                   String cycleY, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryAmountMonth_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryAmountMonth_name, __cb);
        try
        {
            __result.prepare(__queryAmountMonth_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(organId);
            __os.writeString(cycleY);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public OrganMonthAmontReturnIce end_queryAmountMonth(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryAmountMonth_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            OrganMonthAmontReturnIce __ret = null;
            __ret = OrganMonthAmontReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryAmountMonth_completed(Ice.TwowayCallbackArg1<OrganMonthAmontReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx __proxy = (segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx)__result.getProxy();
        OrganMonthAmontReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_queryAmountMonth(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryHisRespTime_name = "queryHisRespTime";

    public AvgRespTimeReturnIce queryHisRespTime(String organId, String cycleY)
    {
        return queryHisRespTime(organId, cycleY, null, false);
    }

    public AvgRespTimeReturnIce queryHisRespTime(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return queryHisRespTime(organId, cycleY, __ctx, true);
    }

    private AvgRespTimeReturnIce queryHisRespTime(String organId, String cycleY, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryHisRespTime_name);
        return end_queryHisRespTime(begin_queryHisRespTime(organId, cycleY, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, String cycleY)
    {
        return begin_queryHisRespTime(organId, cycleY, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return begin_queryHisRespTime(organId, cycleY, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, String cycleY, Ice.Callback __cb)
    {
        return begin_queryHisRespTime(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, String cycleY, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryHisRespTime(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, String cycleY, Callback_OrganMonthAmountServiceIce_queryHisRespTime __cb)
    {
        return begin_queryHisRespTime(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, String cycleY, java.util.Map<String, String> __ctx, Callback_OrganMonthAmountServiceIce_queryHisRespTime __cb)
    {
        return begin_queryHisRespTime(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, 
                                                  String cycleY, 
                                                  IceInternal.Functional_GenericCallback1<AvgRespTimeReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryHisRespTime(organId, cycleY, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, 
                                                  String cycleY, 
                                                  IceInternal.Functional_GenericCallback1<AvgRespTimeReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHisRespTime(organId, cycleY, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, 
                                                  String cycleY, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<AvgRespTimeReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryHisRespTime(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryHisRespTime(String organId, 
                                                  String cycleY, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<AvgRespTimeReturnIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHisRespTime(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryHisRespTime(String organId, 
                                                   String cycleY, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<AvgRespTimeReturnIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHisRespTime(organId, cycleY, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.organmonth.AvgRespTimeReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  OrganMonthAmountServiceIcePrxHelper.__queryHisRespTime_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_queryHisRespTime(String organId, 
                                                   String cycleY, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryHisRespTime_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryHisRespTime_name, __cb);
        try
        {
            __result.prepare(__queryHisRespTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(organId);
            __os.writeString(cycleY);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public AvgRespTimeReturnIce end_queryHisRespTime(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryHisRespTime_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            AvgRespTimeReturnIce __ret = null;
            __ret = AvgRespTimeReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryHisRespTime_completed(Ice.TwowayCallbackArg1<AvgRespTimeReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx __proxy = (segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx)__result.getProxy();
        AvgRespTimeReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_queryHisRespTime(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryTimelyAmountMonth_name = "queryTimelyAmountMonth";

    public TimelyAmountMonthReturnIce queryTimelyAmountMonth(String organId, String cycleY)
    {
        return queryTimelyAmountMonth(organId, cycleY, null, false);
    }

    public TimelyAmountMonthReturnIce queryTimelyAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return queryTimelyAmountMonth(organId, cycleY, __ctx, true);
    }

    private TimelyAmountMonthReturnIce queryTimelyAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTimelyAmountMonth_name);
        return end_queryTimelyAmountMonth(begin_queryTimelyAmountMonth(organId, cycleY, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, String cycleY)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, String cycleY, Ice.Callback __cb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, String cycleY, Callback_OrganMonthAmountServiceIce_queryTimelyAmountMonth __cb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, Callback_OrganMonthAmountServiceIce_queryTimelyAmountMonth __cb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, 
                                                        String cycleY, 
                                                        IceInternal.Functional_GenericCallback1<TimelyAmountMonthReturnIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, 
                                                        String cycleY, 
                                                        IceInternal.Functional_GenericCallback1<TimelyAmountMonthReturnIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, 
                                                        String cycleY, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<TimelyAmountMonthReturnIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, 
                                                        String cycleY, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<TimelyAmountMonthReturnIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, 
                                                         String cycleY, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<TimelyAmountMonthReturnIce> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTimelyAmountMonth(organId, cycleY, __ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.organmonth.TimelyAmountMonthReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        OrganMonthAmountServiceIcePrxHelper.__queryTimelyAmountMonth_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_queryTimelyAmountMonth(String organId, 
                                                         String cycleY, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTimelyAmountMonth_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTimelyAmountMonth_name, __cb);
        try
        {
            __result.prepare(__queryTimelyAmountMonth_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(organId);
            __os.writeString(cycleY);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TimelyAmountMonthReturnIce end_queryTimelyAmountMonth(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTimelyAmountMonth_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TimelyAmountMonthReturnIce __ret = null;
            __ret = TimelyAmountMonthReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTimelyAmountMonth_completed(Ice.TwowayCallbackArg1<TimelyAmountMonthReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx __proxy = (segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx)__result.getProxy();
        TimelyAmountMonthReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_queryTimelyAmountMonth(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryUserAmountMonth_name = "queryUserAmountMonth";

    public UserAmountMonthReturnIce queryUserAmountMonth(String organId, String cycleY)
    {
        return queryUserAmountMonth(organId, cycleY, null, false);
    }

    public UserAmountMonthReturnIce queryUserAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return queryUserAmountMonth(organId, cycleY, __ctx, true);
    }

    private UserAmountMonthReturnIce queryUserAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryUserAmountMonth_name);
        return end_queryUserAmountMonth(begin_queryUserAmountMonth(organId, cycleY, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, String cycleY)
    {
        return begin_queryUserAmountMonth(organId, cycleY, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx)
    {
        return begin_queryUserAmountMonth(organId, cycleY, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, String cycleY, Ice.Callback __cb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, String cycleY, Callback_OrganMonthAmountServiceIce_queryUserAmountMonth __cb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, String cycleY, java.util.Map<String, String> __ctx, Callback_OrganMonthAmountServiceIce_queryUserAmountMonth __cb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, 
                                                      String cycleY, 
                                                      IceInternal.Functional_GenericCallback1<UserAmountMonthReturnIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, 
                                                      String cycleY, 
                                                      IceInternal.Functional_GenericCallback1<UserAmountMonthReturnIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, 
                                                      String cycleY, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<UserAmountMonthReturnIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserAmountMonth(String organId, 
                                                      String cycleY, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<UserAmountMonthReturnIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryUserAmountMonth(String organId, 
                                                       String cycleY, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<UserAmountMonthReturnIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserAmountMonth(organId, cycleY, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.organmonth.UserAmountMonthReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      OrganMonthAmountServiceIcePrxHelper.__queryUserAmountMonth_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_queryUserAmountMonth(String organId, 
                                                       String cycleY, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryUserAmountMonth_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryUserAmountMonth_name, __cb);
        try
        {
            __result.prepare(__queryUserAmountMonth_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(organId);
            __os.writeString(cycleY);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserAmountMonthReturnIce end_queryUserAmountMonth(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryUserAmountMonth_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserAmountMonthReturnIce __ret = null;
            __ret = UserAmountMonthReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryUserAmountMonth_completed(Ice.TwowayCallbackArg1<UserAmountMonthReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx __proxy = (segi.medicaltrans.report.organmonth.OrganMonthAmountServiceIcePrx)__result.getProxy();
        UserAmountMonthReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_queryUserAmountMonth(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static OrganMonthAmountServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), OrganMonthAmountServiceIcePrx.class, OrganMonthAmountServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static OrganMonthAmountServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), OrganMonthAmountServiceIcePrx.class, OrganMonthAmountServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static OrganMonthAmountServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), OrganMonthAmountServiceIcePrx.class, OrganMonthAmountServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static OrganMonthAmountServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), OrganMonthAmountServiceIcePrx.class, OrganMonthAmountServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static OrganMonthAmountServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, OrganMonthAmountServiceIcePrx.class, OrganMonthAmountServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static OrganMonthAmountServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, OrganMonthAmountServiceIcePrx.class, OrganMonthAmountServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::report::organmonth::OrganMonthAmountServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, OrganMonthAmountServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static OrganMonthAmountServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            OrganMonthAmountServiceIcePrxHelper result = new OrganMonthAmountServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
