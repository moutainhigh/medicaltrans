// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_personal_volume_month.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.report.pervolume.month;

/**
 * Provides type-specific helper functions.
 **/
public final class PersonalVolumeMonthServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements PersonalVolumeMonthServiceIcePrx
{
    private static final String __getMonthTransVolumeRank_name = "getMonthTransVolumeRank";

    public PersonalVolumeMonthPaginator getMonthTransVolumeRank(PerTaskAmoMonthParam params)
    {
        return getMonthTransVolumeRank(params, null, false);
    }

    public PersonalVolumeMonthPaginator getMonthTransVolumeRank(PerTaskAmoMonthParam params, java.util.Map<String, String> __ctx)
    {
        return getMonthTransVolumeRank(params, __ctx, true);
    }

    private PersonalVolumeMonthPaginator getMonthTransVolumeRank(PerTaskAmoMonthParam params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getMonthTransVolumeRank_name);
        return end_getMonthTransVolumeRank(begin_getMonthTransVolumeRank(params, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params)
    {
        return begin_getMonthTransVolumeRank(params, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, java.util.Map<String, String> __ctx)
    {
        return begin_getMonthTransVolumeRank(params, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, Ice.Callback __cb)
    {
        return begin_getMonthTransVolumeRank(params, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMonthTransVolumeRank(params, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, Callback_PersonalVolumeMonthServiceIce_getMonthTransVolumeRank __cb)
    {
        return begin_getMonthTransVolumeRank(params, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, java.util.Map<String, String> __ctx, Callback_PersonalVolumeMonthServiceIce_getMonthTransVolumeRank __cb)
    {
        return begin_getMonthTransVolumeRank(params, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, 
                                                         IceInternal.Functional_GenericCallback1<PersonalVolumeMonthPaginator> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMonthTransVolumeRank(params, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, 
                                                         IceInternal.Functional_GenericCallback1<PersonalVolumeMonthPaginator> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMonthTransVolumeRank(params, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<PersonalVolumeMonthPaginator> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMonthTransVolumeRank(params, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<PersonalVolumeMonthPaginator> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMonthTransVolumeRank(params, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.Functional_GenericCallback1<PersonalVolumeMonthPaginator> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMonthTransVolumeRank(params, __ctx, __explicitCtx, __synchronous, 
                                             new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.pervolume.month.PersonalVolumeMonthPaginator>(__responseCb, __exceptionCb, __sentCb)
                                                 {
                                                     public final void __completed(Ice.AsyncResult __result)
                                                     {
                                                         PersonalVolumeMonthServiceIcePrxHelper.__getMonthTransVolumeRank_completed(this, __result);
                                                     }
                                                 });
    }

    private Ice.AsyncResult begin_getMonthTransVolumeRank(PerTaskAmoMonthParam params, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMonthTransVolumeRank_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMonthTransVolumeRank_name, __cb);
        try
        {
            __result.prepare(__getMonthTransVolumeRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            PerTaskAmoMonthParam.__write(__os, params);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PersonalVolumeMonthPaginator end_getMonthTransVolumeRank(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMonthTransVolumeRank_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PersonalVolumeMonthPaginator __ret = null;
            __ret = PersonalVolumeMonthPaginator.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMonthTransVolumeRank_completed(Ice.TwowayCallbackArg1<PersonalVolumeMonthPaginator> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.pervolume.month.PersonalVolumeMonthServiceIcePrx __proxy = (segi.medicaltrans.report.pervolume.month.PersonalVolumeMonthServiceIcePrx)__result.getProxy();
        PersonalVolumeMonthPaginator __ret = null;
        try
        {
            __ret = __proxy.end_getMonthTransVolumeRank(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PersonalVolumeMonthServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), PersonalVolumeMonthServiceIcePrx.class, PersonalVolumeMonthServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PersonalVolumeMonthServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), PersonalVolumeMonthServiceIcePrx.class, PersonalVolumeMonthServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PersonalVolumeMonthServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), PersonalVolumeMonthServiceIcePrx.class, PersonalVolumeMonthServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PersonalVolumeMonthServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), PersonalVolumeMonthServiceIcePrx.class, PersonalVolumeMonthServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static PersonalVolumeMonthServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, PersonalVolumeMonthServiceIcePrx.class, PersonalVolumeMonthServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static PersonalVolumeMonthServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, PersonalVolumeMonthServiceIcePrx.class, PersonalVolumeMonthServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::report::pervolume::month::PersonalVolumeMonthServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, PersonalVolumeMonthServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static PersonalVolumeMonthServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PersonalVolumeMonthServiceIcePrxHelper result = new PersonalVolumeMonthServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
