// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_trans_statistics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.report.trans;

public class TransTimeIce implements java.lang.Cloneable, java.io.Serializable
{
    public String timeName;

    public String
    getTimeName()
    {
        return timeName;
    }

    public void
    setTimeName(String _timeName)
    {
        timeName = _timeName;
    }

    public String time;

    public String
    getTime()
    {
        return time;
    }

    public void
    setTime(String _time)
    {
        time = _time;
    }

    public TransTimeIce()
    {
        timeName = "";
        time = "";
    }

    public TransTimeIce(String timeName, String time)
    {
        this.timeName = timeName;
        this.time = time;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TransTimeIce _r = null;
        if(rhs instanceof TransTimeIce)
        {
            _r = (TransTimeIce)rhs;
        }

        if(_r != null)
        {
            if(timeName != _r.timeName)
            {
                if(timeName == null || _r.timeName == null || !timeName.equals(_r.timeName))
                {
                    return false;
                }
            }
            if(time != _r.time)
            {
                if(time == null || _r.time == null || !time.equals(_r.time))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::report::trans::TransTimeIce");
        __h = IceInternal.HashUtil.hashAdd(__h, timeName);
        __h = IceInternal.HashUtil.hashAdd(__h, time);
        return __h;
    }

    public TransTimeIce
    clone()
    {
        TransTimeIce c = null;
        try
        {
            c = (TransTimeIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(timeName);
        __os.writeString(time);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        timeName = __is.readString();
        time = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, TransTimeIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TransTimeIce
    __read(IceInternal.BasicStream __is, TransTimeIce __v)
    {
        if(__v == null)
        {
             __v = new TransTimeIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TransTimeIce __nullMarshalValue = new TransTimeIce();

    public static final long serialVersionUID = -1631543919L;
}
