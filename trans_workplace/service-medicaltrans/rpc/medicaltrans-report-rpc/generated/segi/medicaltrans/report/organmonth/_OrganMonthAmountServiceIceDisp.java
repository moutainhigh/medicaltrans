// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `organMonthAmount.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.report.organmonth;

public abstract class _OrganMonthAmountServiceIceDisp extends Ice.ObjectImpl implements OrganMonthAmountServiceIce
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::report::organmonth::OrganMonthAmountServiceIce"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final TransProfileReturnIce getTransProfile(String organId, String cycleY)
    {
        return getTransProfile(organId, cycleY, null);
    }

    public final OrganMonthAmontReturnIce queryAmountMonth(String organId, String cycleY)
    {
        return queryAmountMonth(organId, cycleY, null);
    }

    public final AvgRespTimeReturnIce queryHisRespTime(String organId, String cycleY)
    {
        return queryHisRespTime(organId, cycleY, null);
    }

    public final TimelyAmountMonthReturnIce queryTimelyAmountMonth(String organId, String cycleY)
    {
        return queryTimelyAmountMonth(organId, cycleY, null);
    }

    public final UserAmountMonthReturnIce queryUserAmountMonth(String organId, String cycleY)
    {
        return queryUserAmountMonth(organId, cycleY, null);
    }

    public static Ice.DispatchStatus ___getTransProfile(OrganMonthAmountServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String organId;
        String cycleY;
        organId = __is.readString();
        cycleY = __is.readString();
        __inS.endReadParams();
        TransProfileReturnIce __ret = __obj.getTransProfile(organId, cycleY, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        TransProfileReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryAmountMonth(OrganMonthAmountServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String organId;
        String cycleY;
        organId = __is.readString();
        cycleY = __is.readString();
        __inS.endReadParams();
        OrganMonthAmontReturnIce __ret = __obj.queryAmountMonth(organId, cycleY, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        OrganMonthAmontReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryTimelyAmountMonth(OrganMonthAmountServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String organId;
        String cycleY;
        organId = __is.readString();
        cycleY = __is.readString();
        __inS.endReadParams();
        TimelyAmountMonthReturnIce __ret = __obj.queryTimelyAmountMonth(organId, cycleY, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        TimelyAmountMonthReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryUserAmountMonth(OrganMonthAmountServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String organId;
        String cycleY;
        organId = __is.readString();
        cycleY = __is.readString();
        __inS.endReadParams();
        UserAmountMonthReturnIce __ret = __obj.queryUserAmountMonth(organId, cycleY, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        UserAmountMonthReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryHisRespTime(OrganMonthAmountServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String organId;
        String cycleY;
        organId = __is.readString();
        cycleY = __is.readString();
        __inS.endReadParams();
        AvgRespTimeReturnIce __ret = __obj.queryHisRespTime(organId, cycleY, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        AvgRespTimeReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getTransProfile",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryAmountMonth",
        "queryHisRespTime",
        "queryTimelyAmountMonth",
        "queryUserAmountMonth"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getTransProfile(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___queryAmountMonth(this, in, __current);
            }
            case 6:
            {
                return ___queryHisRespTime(this, in, __current);
            }
            case 7:
            {
                return ___queryTimelyAmountMonth(this, in, __current);
            }
            case 8:
            {
                return ___queryUserAmountMonth(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
