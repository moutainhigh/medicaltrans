// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `commons.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package model;

public class AreaIce implements java.lang.Cloneable, java.io.Serializable
{
    public int areaId;

    public String areaName;

    public AreaIce()
    {
        areaName = "";
    }

    public AreaIce(int areaId, String areaName)
    {
        this.areaId = areaId;
        this.areaName = areaName;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AreaIce _r = null;
        if(rhs instanceof AreaIce)
        {
            _r = (AreaIce)rhs;
        }

        if(_r != null)
        {
            if(areaId != _r.areaId)
            {
                return false;
            }
            if(areaName != _r.areaName)
            {
                if(areaName == null || _r.areaName == null || !areaName.equals(_r.areaName))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::model::AreaIce");
        __h = IceInternal.HashUtil.hashAdd(__h, areaId);
        __h = IceInternal.HashUtil.hashAdd(__h, areaName);
        return __h;
    }

    public AreaIce
    clone()
    {
        AreaIce c = null;
        try
        {
            c = (AreaIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(areaId);
        __os.writeString(areaName);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        areaId = __is.readInt();
        areaName = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, AreaIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public AreaIce
    __read(IceInternal.BasicStream __is, AreaIce __v)
    {
        if(__v == null)
        {
             __v = new AreaIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final AreaIce __nullMarshalValue = new AreaIce();

    public static final long serialVersionUID = 1531943190L;
}
