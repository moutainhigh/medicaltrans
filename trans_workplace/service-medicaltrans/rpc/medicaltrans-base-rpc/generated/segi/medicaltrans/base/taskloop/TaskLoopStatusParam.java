// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `task_loop.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.taskloop;

public class TaskLoopStatusParam implements java.lang.Cloneable, java.io.Serializable
{
    public String organId;

    public String
    getOrganId()
    {
        return organId;
    }

    public void
    setOrganId(String _organId)
    {
        organId = _organId;
    }

    public String taskLoopId;

    public String
    getTaskLoopId()
    {
        return taskLoopId;
    }

    public void
    setTaskLoopId(String _taskLoopId)
    {
        taskLoopId = _taskLoopId;
    }

    public String status;

    public String
    getStatus()
    {
        return status;
    }

    public void
    setStatus(String _status)
    {
        status = _status;
    }

    public String updateBy;

    public String
    getUpdateBy()
    {
        return updateBy;
    }

    public void
    setUpdateBy(String _updateBy)
    {
        updateBy = _updateBy;
    }

    public String loseRemark;

    public String
    getLoseRemark()
    {
        return loseRemark;
    }

    public void
    setLoseRemark(String _loseRemark)
    {
        loseRemark = _loseRemark;
    }

    public TaskLoopStatusParam()
    {
        organId = "";
        taskLoopId = "";
        status = "";
        updateBy = "";
        loseRemark = "";
    }

    public TaskLoopStatusParam(String organId, String taskLoopId, String status, String updateBy, String loseRemark)
    {
        this.organId = organId;
        this.taskLoopId = taskLoopId;
        this.status = status;
        this.updateBy = updateBy;
        this.loseRemark = loseRemark;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TaskLoopStatusParam _r = null;
        if(rhs instanceof TaskLoopStatusParam)
        {
            _r = (TaskLoopStatusParam)rhs;
        }

        if(_r != null)
        {
            if(organId != _r.organId)
            {
                if(organId == null || _r.organId == null || !organId.equals(_r.organId))
                {
                    return false;
                }
            }
            if(taskLoopId != _r.taskLoopId)
            {
                if(taskLoopId == null || _r.taskLoopId == null || !taskLoopId.equals(_r.taskLoopId))
                {
                    return false;
                }
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }
            if(updateBy != _r.updateBy)
            {
                if(updateBy == null || _r.updateBy == null || !updateBy.equals(_r.updateBy))
                {
                    return false;
                }
            }
            if(loseRemark != _r.loseRemark)
            {
                if(loseRemark == null || _r.loseRemark == null || !loseRemark.equals(_r.loseRemark))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::taskloop::TaskLoopStatusParam");
        __h = IceInternal.HashUtil.hashAdd(__h, organId);
        __h = IceInternal.HashUtil.hashAdd(__h, taskLoopId);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, updateBy);
        __h = IceInternal.HashUtil.hashAdd(__h, loseRemark);
        return __h;
    }

    public TaskLoopStatusParam
    clone()
    {
        TaskLoopStatusParam c = null;
        try
        {
            c = (TaskLoopStatusParam)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(organId);
        __os.writeString(taskLoopId);
        __os.writeString(status);
        __os.writeString(updateBy);
        __os.writeString(loseRemark);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        organId = __is.readString();
        taskLoopId = __is.readString();
        status = __is.readString();
        updateBy = __is.readString();
        loseRemark = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, TaskLoopStatusParam __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TaskLoopStatusParam
    __read(IceInternal.BasicStream __is, TaskLoopStatusParam __v)
    {
        if(__v == null)
        {
             __v = new TaskLoopStatusParam();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TaskLoopStatusParam __nullMarshalValue = new TaskLoopStatusParam();

    public static final long serialVersionUID = 1849872582L;
}
