// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `transtype.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.transtype;

/**
 * Provides type-specific helper functions.
 **/
public final class TransTypeServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements TransTypeServiceIcePrx
{
    private static final String __queryOprGuide_name = "queryOprGuide";

    public TransTypeOprGuideRetIce queryOprGuide(TransTypeIce transTypeIce)
    {
        return queryOprGuide(transTypeIce, null, false);
    }

    public TransTypeOprGuideRetIce queryOprGuide(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return queryOprGuide(transTypeIce, __ctx, true);
    }

    private TransTypeOprGuideRetIce queryOprGuide(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryOprGuide_name);
        return end_queryOprGuide(begin_queryOprGuide(transTypeIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce)
    {
        return begin_queryOprGuide(transTypeIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return begin_queryOprGuide(transTypeIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, Ice.Callback __cb)
    {
        return begin_queryOprGuide(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryOprGuide(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, Callback_TransTypeServiceIce_queryOprGuide __cb)
    {
        return begin_queryOprGuide(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_queryOprGuide __cb)
    {
        return begin_queryOprGuide(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, 
                                               IceInternal.Functional_GenericCallback1<TransTypeOprGuideRetIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryOprGuide(transTypeIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, 
                                               IceInternal.Functional_GenericCallback1<TransTypeOprGuideRetIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryOprGuide(transTypeIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<TransTypeOprGuideRetIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryOprGuide(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<TransTypeOprGuideRetIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryOprGuide(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<TransTypeOprGuideRetIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryOprGuide(transTypeIce, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.transtype.TransTypeOprGuideRetIce>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               TransTypeServiceIcePrxHelper.__queryOprGuide_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_queryOprGuide(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryOprGuide_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryOprGuide_name, __cb);
        try
        {
            __result.prepare(__queryOprGuide_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransTypeOprGuideRetIce end_queryOprGuide(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryOprGuide_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransTypeOprGuideRetIce __ret = null;
            __ret = TransTypeOprGuideRetIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryOprGuide_completed(Ice.TwowayCallbackArg1<TransTypeOprGuideRetIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        TransTypeOprGuideRetIce __ret = null;
        try
        {
            __ret = __proxy.end_queryOprGuide(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryTransType_name = "queryTransType";

    public TransTypeDetailReturnIce queryTransType(TransTypeIce transTypeIce)
    {
        return queryTransType(transTypeIce, null, false);
    }

    public TransTypeDetailReturnIce queryTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return queryTransType(transTypeIce, __ctx, true);
    }

    private TransTypeDetailReturnIce queryTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTransType_name);
        return end_queryTransType(begin_queryTransType(transTypeIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce)
    {
        return begin_queryTransType(transTypeIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return begin_queryTransType(transTypeIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, Ice.Callback __cb)
    {
        return begin_queryTransType(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTransType(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, Callback_TransTypeServiceIce_queryTransType __cb)
    {
        return begin_queryTransType(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_queryTransType __cb)
    {
        return begin_queryTransType(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, 
                                                IceInternal.Functional_GenericCallback1<TransTypeDetailReturnIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTransType(transTypeIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, 
                                                IceInternal.Functional_GenericCallback1<TransTypeDetailReturnIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransType(transTypeIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<TransTypeDetailReturnIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTransType(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<TransTypeDetailReturnIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransType(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<TransTypeDetailReturnIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransType(transTypeIce, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.transtype.TransTypeDetailReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                TransTypeServiceIcePrxHelper.__queryTransType_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_queryTransType(TransTypeIce transTypeIce, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTransType_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTransType_name, __cb);
        try
        {
            __result.prepare(__queryTransType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransTypeDetailReturnIce end_queryTransType(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTransType_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransTypeDetailReturnIce __ret = null;
            __ret = TransTypeDetailReturnIce.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTransType_completed(Ice.TwowayCallbackArg1<TransTypeDetailReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        TransTypeDetailReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_queryTransType(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveTransType_name = "saveTransType";

    public resp.RpcRespIce saveTransType(TransTypeDetailIce transTypeDetailIce)
    {
        return saveTransType(transTypeDetailIce, null, false);
    }

    public resp.RpcRespIce saveTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx)
    {
        return saveTransType(transTypeDetailIce, __ctx, true);
    }

    private resp.RpcRespIce saveTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveTransType_name);
        return end_saveTransType(begin_saveTransType(transTypeDetailIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce)
    {
        return begin_saveTransType(transTypeDetailIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx)
    {
        return begin_saveTransType(transTypeDetailIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, Ice.Callback __cb)
    {
        return begin_saveTransType(transTypeDetailIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveTransType(transTypeDetailIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, Callback_TransTypeServiceIce_saveTransType __cb)
    {
        return begin_saveTransType(transTypeDetailIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_saveTransType __cb)
    {
        return begin_saveTransType(transTypeDetailIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTransType(transTypeDetailIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTransType(transTypeDetailIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTransType(transTypeDetailIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTransType(transTypeDetailIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTransType(transTypeDetailIce, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               TransTypeServiceIcePrxHelper.__saveTransType_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_saveTransType(TransTypeDetailIce transTypeDetailIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveTransType_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveTransType_name, __cb);
        try
        {
            __result.prepare(__saveTransType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeDetailIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_saveTransType(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveTransType_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveTransType_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_saveTransType(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __transTypeAllList_name = "transTypeAllList";

    public TransTypeAllListIce transTypeAllList(TransTypeIce transTypeIce)
    {
        return transTypeAllList(transTypeIce, null, false);
    }

    public TransTypeAllListIce transTypeAllList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return transTypeAllList(transTypeIce, __ctx, true);
    }

    private TransTypeAllListIce transTypeAllList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__transTypeAllList_name);
        return end_transTypeAllList(begin_transTypeAllList(transTypeIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce)
    {
        return begin_transTypeAllList(transTypeIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return begin_transTypeAllList(transTypeIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, Ice.Callback __cb)
    {
        return begin_transTypeAllList(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_transTypeAllList(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, Callback_TransTypeServiceIce_transTypeAllList __cb)
    {
        return begin_transTypeAllList(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_transTypeAllList __cb)
    {
        return begin_transTypeAllList(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, 
                                                  IceInternal.Functional_GenericCallback1<TransTypeAllListIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transTypeAllList(transTypeIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, 
                                                  IceInternal.Functional_GenericCallback1<TransTypeAllListIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypeAllList(transTypeIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<TransTypeAllListIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transTypeAllList(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<TransTypeAllListIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypeAllList(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<TransTypeAllListIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypeAllList(transTypeIce, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.transtype.TransTypeAllListIce>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  TransTypeServiceIcePrxHelper.__transTypeAllList_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_transTypeAllList(TransTypeIce transTypeIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__transTypeAllList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__transTypeAllList_name, __cb);
        try
        {
            __result.prepare(__transTypeAllList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransTypeAllListIce end_transTypeAllList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __transTypeAllList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransTypeAllListIce __ret = null;
            __ret = TransTypeAllListIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __transTypeAllList_completed(Ice.TwowayCallbackArg1<TransTypeAllListIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        TransTypeAllListIce __ret = null;
        try
        {
            __ret = __proxy.end_transTypeAllList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __transTypeList_name = "transTypeList";

    public TransTypeRetPageIce transTypeList(TransTypeIce transTypeIce)
    {
        return transTypeList(transTypeIce, null, false);
    }

    public TransTypeRetPageIce transTypeList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return transTypeList(transTypeIce, __ctx, true);
    }

    private TransTypeRetPageIce transTypeList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__transTypeList_name);
        return end_transTypeList(begin_transTypeList(transTypeIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce)
    {
        return begin_transTypeList(transTypeIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return begin_transTypeList(transTypeIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, Ice.Callback __cb)
    {
        return begin_transTypeList(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_transTypeList(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, Callback_TransTypeServiceIce_transTypeList __cb)
    {
        return begin_transTypeList(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_transTypeList __cb)
    {
        return begin_transTypeList(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transTypeList(transTypeIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypeList(transTypeIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transTypeList(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypeList(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypeList(transTypeIce, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.transtype.TransTypeRetPageIce>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               TransTypeServiceIcePrxHelper.__transTypeList_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_transTypeList(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__transTypeList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__transTypeList_name, __cb);
        try
        {
            __result.prepare(__transTypeList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransTypeRetPageIce end_transTypeList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __transTypeList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransTypeRetPageIce __ret = null;
            __ret = TransTypeRetPageIce.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __transTypeList_completed(Ice.TwowayCallbackArg1<TransTypeRetPageIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        TransTypeRetPageIce __ret = null;
        try
        {
            __ret = __proxy.end_transTypeList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __transTypePage_name = "transTypePage";

    public TransTypeRetPageIce transTypePage(TransTypeIce transTypeIce)
    {
        return transTypePage(transTypeIce, null, false);
    }

    public TransTypeRetPageIce transTypePage(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return transTypePage(transTypeIce, __ctx, true);
    }

    private TransTypeRetPageIce transTypePage(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__transTypePage_name);
        return end_transTypePage(begin_transTypePage(transTypeIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce)
    {
        return begin_transTypePage(transTypeIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return begin_transTypePage(transTypeIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, Ice.Callback __cb)
    {
        return begin_transTypePage(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_transTypePage(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, Callback_TransTypeServiceIce_transTypePage __cb)
    {
        return begin_transTypePage(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_transTypePage __cb)
    {
        return begin_transTypePage(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transTypePage(transTypeIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypePage(transTypeIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transTypePage(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypePage(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<TransTypeRetPageIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transTypePage(transTypeIce, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.transtype.TransTypeRetPageIce>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               TransTypeServiceIcePrxHelper.__transTypePage_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_transTypePage(TransTypeIce transTypeIce, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__transTypePage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__transTypePage_name, __cb);
        try
        {
            __result.prepare(__transTypePage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransTypeRetPageIce end_transTypePage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __transTypePage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransTypeRetPageIce __ret = null;
            __ret = TransTypeRetPageIce.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __transTypePage_completed(Ice.TwowayCallbackArg1<TransTypeRetPageIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        TransTypeRetPageIce __ret = null;
        try
        {
            __ret = __proxy.end_transTypePage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateStatusTransType_name = "updateStatusTransType";

    public resp.RpcRespIce updateStatusTransType(TransTypeIce transTypeIce)
    {
        return updateStatusTransType(transTypeIce, null, false);
    }

    public resp.RpcRespIce updateStatusTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return updateStatusTransType(transTypeIce, __ctx, true);
    }

    private resp.RpcRespIce updateStatusTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateStatusTransType_name);
        return end_updateStatusTransType(begin_updateStatusTransType(transTypeIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce)
    {
        return begin_updateStatusTransType(transTypeIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx)
    {
        return begin_updateStatusTransType(transTypeIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, Ice.Callback __cb)
    {
        return begin_updateStatusTransType(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateStatusTransType(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, Callback_TransTypeServiceIce_updateStatusTransType __cb)
    {
        return begin_updateStatusTransType(transTypeIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_updateStatusTransType __cb)
    {
        return begin_updateStatusTransType(transTypeIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateStatusTransType(transTypeIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateStatusTransType(transTypeIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateStatusTransType(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateStatusTransType(transTypeIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateStatusTransType(transTypeIce, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       TransTypeServiceIcePrxHelper.__updateStatusTransType_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_updateStatusTransType(TransTypeIce transTypeIce, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateStatusTransType_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateStatusTransType_name, __cb);
        try
        {
            __result.prepare(__updateStatusTransType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateStatusTransType(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateStatusTransType_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateStatusTransType_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateStatusTransType(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateTransType_name = "updateTransType";

    public resp.RpcRespIce updateTransType(TransTypeDetailIce transTypeDetailIce)
    {
        return updateTransType(transTypeDetailIce, null, false);
    }

    public resp.RpcRespIce updateTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx)
    {
        return updateTransType(transTypeDetailIce, __ctx, true);
    }

    private resp.RpcRespIce updateTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateTransType_name);
        return end_updateTransType(begin_updateTransType(transTypeDetailIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce)
    {
        return begin_updateTransType(transTypeDetailIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx)
    {
        return begin_updateTransType(transTypeDetailIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, Ice.Callback __cb)
    {
        return begin_updateTransType(transTypeDetailIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTransType(transTypeDetailIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, Callback_TransTypeServiceIce_updateTransType __cb)
    {
        return begin_updateTransType(transTypeDetailIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, java.util.Map<String, String> __ctx, Callback_TransTypeServiceIce_updateTransType __cb)
    {
        return begin_updateTransType(transTypeDetailIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTransType(transTypeDetailIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTransType(transTypeDetailIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTransType(transTypeDetailIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTransType(transTypeDetailIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTransType(transTypeDetailIce, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 TransTypeServiceIcePrxHelper.__updateTransType_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_updateTransType(TransTypeDetailIce transTypeDetailIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTransType_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateTransType_name, __cb);
        try
        {
            __result.prepare(__updateTransType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(transTypeDetailIce);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateTransType(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateTransType_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateTransType_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.transtype.TransTypeServiceIcePrx __proxy = (segi.medicaltrans.base.transtype.TransTypeServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateTransType(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransTypeServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), TransTypeServiceIcePrx.class, TransTypeServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransTypeServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), TransTypeServiceIcePrx.class, TransTypeServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransTypeServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), TransTypeServiceIcePrx.class, TransTypeServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransTypeServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), TransTypeServiceIcePrx.class, TransTypeServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static TransTypeServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, TransTypeServiceIcePrx.class, TransTypeServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static TransTypeServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, TransTypeServiceIcePrx.class, TransTypeServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::base::transtype::TransTypeServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, TransTypeServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static TransTypeServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TransTypeServiceIcePrxHelper result = new TransTypeServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
