// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_userhosp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.userhosp;

public class UserHospParamIce implements java.lang.Cloneable, java.io.Serializable
{
    public String userId;

    public String
    getUserId()
    {
        return userId;
    }

    public void
    setUserId(String _userId)
    {
        userId = _userId;
    }

    public String updateBy;

    public String
    getUpdateBy()
    {
        return updateBy;
    }

    public void
    setUpdateBy(String _updateBy)
    {
        updateBy = _updateBy;
    }

    public java.util.List<UserHospInfoIce> organList;

    public java.util.List<UserHospInfoIce>
    getOrganList()
    {
        return organList;
    }

    public void
    setOrganList(java.util.List<UserHospInfoIce> _organList)
    {
        organList = _organList;
    }

    public UserHospParamIce()
    {
        userId = "";
        updateBy = "";
    }

    public UserHospParamIce(String userId, String updateBy, java.util.List<UserHospInfoIce> organList)
    {
        this.userId = userId;
        this.updateBy = updateBy;
        this.organList = organList;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UserHospParamIce _r = null;
        if(rhs instanceof UserHospParamIce)
        {
            _r = (UserHospParamIce)rhs;
        }

        if(_r != null)
        {
            if(userId != _r.userId)
            {
                if(userId == null || _r.userId == null || !userId.equals(_r.userId))
                {
                    return false;
                }
            }
            if(updateBy != _r.updateBy)
            {
                if(updateBy == null || _r.updateBy == null || !updateBy.equals(_r.updateBy))
                {
                    return false;
                }
            }
            if(organList != _r.organList)
            {
                if(organList == null || _r.organList == null || !organList.equals(_r.organList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::userhosp::UserHospParamIce");
        __h = IceInternal.HashUtil.hashAdd(__h, userId);
        __h = IceInternal.HashUtil.hashAdd(__h, updateBy);
        __h = IceInternal.HashUtil.hashAdd(__h, organList);
        return __h;
    }

    public UserHospParamIce
    clone()
    {
        UserHospParamIce c = null;
        try
        {
            c = (UserHospParamIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(userId);
        __os.writeString(updateBy);
        UserHospInfoIceListHelper.write(__os, organList);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        userId = __is.readString();
        updateBy = __is.readString();
        organList = UserHospInfoIceListHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, UserHospParamIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public UserHospParamIce
    __read(IceInternal.BasicStream __is, UserHospParamIce __v)
    {
        if(__v == null)
        {
             __v = new UserHospParamIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final UserHospParamIce __nullMarshalValue = new UserHospParamIce();

    public static final long serialVersionUID = 158327441L;
}
