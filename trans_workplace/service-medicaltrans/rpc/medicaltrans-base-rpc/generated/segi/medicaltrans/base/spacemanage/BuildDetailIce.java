// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `spacemanage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.spacemanage;

public class BuildDetailIce implements java.lang.Cloneable, java.io.Serializable
{
    public String buildId;

    public String
    getBuildId()
    {
        return buildId;
    }

    public void
    setBuildId(String _buildId)
    {
        buildId = _buildId;
    }

    public String buildName;

    public String
    getBuildName()
    {
        return buildName;
    }

    public void
    setBuildName(String _buildName)
    {
        buildName = _buildName;
    }

    public String buildFloor;

    public String
    getBuildFloor()
    {
        return buildFloor;
    }

    public void
    setBuildFloor(String _buildFloor)
    {
        buildFloor = _buildFloor;
    }

    public String status;

    public String
    getStatus()
    {
        return status;
    }

    public void
    setStatus(String _status)
    {
        status = _status;
    }

    public String statusName;

    public String
    getStatusName()
    {
        return statusName;
    }

    public void
    setStatusName(String _statusName)
    {
        statusName = _statusName;
    }

    public String elevatorNum;

    public String
    getElevatorNum()
    {
        return elevatorNum;
    }

    public void
    setElevatorNum(String _elevatorNum)
    {
        elevatorNum = _elevatorNum;
    }

    public String contractor;

    public String
    getContractor()
    {
        return contractor;
    }

    public void
    setContractor(String _contractor)
    {
        contractor = _contractor;
    }

    public String developers;

    public String
    getDevelopers()
    {
        return developers;
    }

    public void
    setDevelopers(String _developers)
    {
        developers = _developers;
    }

    public String high;

    public String
    getHigh()
    {
        return high;
    }

    public void
    setHigh(String _high)
    {
        high = _high;
    }

    public String floorArea;

    public String
    getFloorArea()
    {
        return floorArea;
    }

    public void
    setFloorArea(String _floorArea)
    {
        floorArea = _floorArea;
    }

    public String upFloor;

    public String
    getUpFloor()
    {
        return upFloor;
    }

    public void
    setUpFloor(String _upFloor)
    {
        upFloor = _upFloor;
    }

    public String underFloor;

    public String
    getUnderFloor()
    {
        return underFloor;
    }

    public void
    setUnderFloor(String _underFloor)
    {
        underFloor = _underFloor;
    }

    public String upHigh;

    public String
    getUpHigh()
    {
        return upHigh;
    }

    public void
    setUpHigh(String _upHigh)
    {
        upHigh = _upHigh;
    }

    public String underHigh;

    public String
    getUnderHigh()
    {
        return underHigh;
    }

    public void
    setUnderHigh(String _underHigh)
    {
        underHigh = _underHigh;
    }

    public String sortNo;

    public String
    getSortNo()
    {
        return sortNo;
    }

    public void
    setSortNo(String _sortNo)
    {
        sortNo = _sortNo;
    }

    public String remark;

    public String
    getRemark()
    {
        return remark;
    }

    public void
    setRemark(String _remark)
    {
        remark = _remark;
    }

    public String picUrl;

    public String
    getPicUrl()
    {
        return picUrl;
    }

    public void
    setPicUrl(String _picUrl)
    {
        picUrl = _picUrl;
    }

    public BuildDetailIce()
    {
        buildId = "";
        buildName = "";
        buildFloor = "";
        status = "";
        statusName = "";
        elevatorNum = "";
        contractor = "";
        developers = "";
        high = "";
        floorArea = "";
        upFloor = "";
        underFloor = "";
        upHigh = "";
        underHigh = "";
        sortNo = "";
        remark = "";
        picUrl = "";
    }

    public BuildDetailIce(String buildId, String buildName, String buildFloor, String status, String statusName, String elevatorNum, String contractor, String developers, String high, String floorArea, String upFloor, String underFloor, String upHigh, String underHigh, String sortNo, String remark, String picUrl)
    {
        this.buildId = buildId;
        this.buildName = buildName;
        this.buildFloor = buildFloor;
        this.status = status;
        this.statusName = statusName;
        this.elevatorNum = elevatorNum;
        this.contractor = contractor;
        this.developers = developers;
        this.high = high;
        this.floorArea = floorArea;
        this.upFloor = upFloor;
        this.underFloor = underFloor;
        this.upHigh = upHigh;
        this.underHigh = underHigh;
        this.sortNo = sortNo;
        this.remark = remark;
        this.picUrl = picUrl;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BuildDetailIce _r = null;
        if(rhs instanceof BuildDetailIce)
        {
            _r = (BuildDetailIce)rhs;
        }

        if(_r != null)
        {
            if(buildId != _r.buildId)
            {
                if(buildId == null || _r.buildId == null || !buildId.equals(_r.buildId))
                {
                    return false;
                }
            }
            if(buildName != _r.buildName)
            {
                if(buildName == null || _r.buildName == null || !buildName.equals(_r.buildName))
                {
                    return false;
                }
            }
            if(buildFloor != _r.buildFloor)
            {
                if(buildFloor == null || _r.buildFloor == null || !buildFloor.equals(_r.buildFloor))
                {
                    return false;
                }
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }
            if(statusName != _r.statusName)
            {
                if(statusName == null || _r.statusName == null || !statusName.equals(_r.statusName))
                {
                    return false;
                }
            }
            if(elevatorNum != _r.elevatorNum)
            {
                if(elevatorNum == null || _r.elevatorNum == null || !elevatorNum.equals(_r.elevatorNum))
                {
                    return false;
                }
            }
            if(contractor != _r.contractor)
            {
                if(contractor == null || _r.contractor == null || !contractor.equals(_r.contractor))
                {
                    return false;
                }
            }
            if(developers != _r.developers)
            {
                if(developers == null || _r.developers == null || !developers.equals(_r.developers))
                {
                    return false;
                }
            }
            if(high != _r.high)
            {
                if(high == null || _r.high == null || !high.equals(_r.high))
                {
                    return false;
                }
            }
            if(floorArea != _r.floorArea)
            {
                if(floorArea == null || _r.floorArea == null || !floorArea.equals(_r.floorArea))
                {
                    return false;
                }
            }
            if(upFloor != _r.upFloor)
            {
                if(upFloor == null || _r.upFloor == null || !upFloor.equals(_r.upFloor))
                {
                    return false;
                }
            }
            if(underFloor != _r.underFloor)
            {
                if(underFloor == null || _r.underFloor == null || !underFloor.equals(_r.underFloor))
                {
                    return false;
                }
            }
            if(upHigh != _r.upHigh)
            {
                if(upHigh == null || _r.upHigh == null || !upHigh.equals(_r.upHigh))
                {
                    return false;
                }
            }
            if(underHigh != _r.underHigh)
            {
                if(underHigh == null || _r.underHigh == null || !underHigh.equals(_r.underHigh))
                {
                    return false;
                }
            }
            if(sortNo != _r.sortNo)
            {
                if(sortNo == null || _r.sortNo == null || !sortNo.equals(_r.sortNo))
                {
                    return false;
                }
            }
            if(remark != _r.remark)
            {
                if(remark == null || _r.remark == null || !remark.equals(_r.remark))
                {
                    return false;
                }
            }
            if(picUrl != _r.picUrl)
            {
                if(picUrl == null || _r.picUrl == null || !picUrl.equals(_r.picUrl))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::spacemanage::BuildDetailIce");
        __h = IceInternal.HashUtil.hashAdd(__h, buildId);
        __h = IceInternal.HashUtil.hashAdd(__h, buildName);
        __h = IceInternal.HashUtil.hashAdd(__h, buildFloor);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, statusName);
        __h = IceInternal.HashUtil.hashAdd(__h, elevatorNum);
        __h = IceInternal.HashUtil.hashAdd(__h, contractor);
        __h = IceInternal.HashUtil.hashAdd(__h, developers);
        __h = IceInternal.HashUtil.hashAdd(__h, high);
        __h = IceInternal.HashUtil.hashAdd(__h, floorArea);
        __h = IceInternal.HashUtil.hashAdd(__h, upFloor);
        __h = IceInternal.HashUtil.hashAdd(__h, underFloor);
        __h = IceInternal.HashUtil.hashAdd(__h, upHigh);
        __h = IceInternal.HashUtil.hashAdd(__h, underHigh);
        __h = IceInternal.HashUtil.hashAdd(__h, sortNo);
        __h = IceInternal.HashUtil.hashAdd(__h, remark);
        __h = IceInternal.HashUtil.hashAdd(__h, picUrl);
        return __h;
    }

    public BuildDetailIce
    clone()
    {
        BuildDetailIce c = null;
        try
        {
            c = (BuildDetailIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(buildId);
        __os.writeString(buildName);
        __os.writeString(buildFloor);
        __os.writeString(status);
        __os.writeString(statusName);
        __os.writeString(elevatorNum);
        __os.writeString(contractor);
        __os.writeString(developers);
        __os.writeString(high);
        __os.writeString(floorArea);
        __os.writeString(upFloor);
        __os.writeString(underFloor);
        __os.writeString(upHigh);
        __os.writeString(underHigh);
        __os.writeString(sortNo);
        __os.writeString(remark);
        __os.writeString(picUrl);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        buildId = __is.readString();
        buildName = __is.readString();
        buildFloor = __is.readString();
        status = __is.readString();
        statusName = __is.readString();
        elevatorNum = __is.readString();
        contractor = __is.readString();
        developers = __is.readString();
        high = __is.readString();
        floorArea = __is.readString();
        upFloor = __is.readString();
        underFloor = __is.readString();
        upHigh = __is.readString();
        underHigh = __is.readString();
        sortNo = __is.readString();
        remark = __is.readString();
        picUrl = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, BuildDetailIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public BuildDetailIce
    __read(IceInternal.BasicStream __is, BuildDetailIce __v)
    {
        if(__v == null)
        {
             __v = new BuildDetailIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final BuildDetailIce __nullMarshalValue = new BuildDetailIce();

    public static final long serialVersionUID = 1129394713L;
}
