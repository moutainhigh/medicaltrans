// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_location_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.location;

public class LocationListIce implements java.lang.Cloneable, java.io.Serializable
{
    public String locationId;

    public String
    getLocationId()
    {
        return locationId;
    }

    public void
    setLocationId(String _locationId)
    {
        locationId = _locationId;
    }

    public String locationName;

    public String
    getLocationName()
    {
        return locationName;
    }

    public void
    setLocationName(String _locationName)
    {
        locationName = _locationName;
    }

    public String floorPositX;

    public String
    getFloorPositX()
    {
        return floorPositX;
    }

    public void
    setFloorPositX(String _floorPositX)
    {
        floorPositX = _floorPositX;
    }

    public String floorPositY;

    public String
    getFloorPositY()
    {
        return floorPositY;
    }

    public void
    setFloorPositY(String _floorPositY)
    {
        floorPositY = _floorPositY;
    }

    public String locateType;

    public String
    getLocateType()
    {
        return locateType;
    }

    public void
    setLocateType(String _locateType)
    {
        locateType = _locateType;
    }

    public String mac;

    public String
    getMac()
    {
        return mac;
    }

    public void
    setMac(String _mac)
    {
        mac = _mac;
    }

    public String status;

    public String
    getStatus()
    {
        return status;
    }

    public void
    setStatus(String _status)
    {
        status = _status;
    }

    public LocationListIce()
    {
        locationId = "";
        locationName = "";
        floorPositX = "";
        floorPositY = "";
        locateType = "";
        mac = "";
        status = "";
    }

    public LocationListIce(String locationId, String locationName, String floorPositX, String floorPositY, String locateType, String mac, String status)
    {
        this.locationId = locationId;
        this.locationName = locationName;
        this.floorPositX = floorPositX;
        this.floorPositY = floorPositY;
        this.locateType = locateType;
        this.mac = mac;
        this.status = status;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LocationListIce _r = null;
        if(rhs instanceof LocationListIce)
        {
            _r = (LocationListIce)rhs;
        }

        if(_r != null)
        {
            if(locationId != _r.locationId)
            {
                if(locationId == null || _r.locationId == null || !locationId.equals(_r.locationId))
                {
                    return false;
                }
            }
            if(locationName != _r.locationName)
            {
                if(locationName == null || _r.locationName == null || !locationName.equals(_r.locationName))
                {
                    return false;
                }
            }
            if(floorPositX != _r.floorPositX)
            {
                if(floorPositX == null || _r.floorPositX == null || !floorPositX.equals(_r.floorPositX))
                {
                    return false;
                }
            }
            if(floorPositY != _r.floorPositY)
            {
                if(floorPositY == null || _r.floorPositY == null || !floorPositY.equals(_r.floorPositY))
                {
                    return false;
                }
            }
            if(locateType != _r.locateType)
            {
                if(locateType == null || _r.locateType == null || !locateType.equals(_r.locateType))
                {
                    return false;
                }
            }
            if(mac != _r.mac)
            {
                if(mac == null || _r.mac == null || !mac.equals(_r.mac))
                {
                    return false;
                }
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::location::LocationListIce");
        __h = IceInternal.HashUtil.hashAdd(__h, locationId);
        __h = IceInternal.HashUtil.hashAdd(__h, locationName);
        __h = IceInternal.HashUtil.hashAdd(__h, floorPositX);
        __h = IceInternal.HashUtil.hashAdd(__h, floorPositY);
        __h = IceInternal.HashUtil.hashAdd(__h, locateType);
        __h = IceInternal.HashUtil.hashAdd(__h, mac);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        return __h;
    }

    public LocationListIce
    clone()
    {
        LocationListIce c = null;
        try
        {
            c = (LocationListIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(locationId);
        __os.writeString(locationName);
        __os.writeString(floorPositX);
        __os.writeString(floorPositY);
        __os.writeString(locateType);
        __os.writeString(mac);
        __os.writeString(status);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        locationId = __is.readString();
        locationName = __is.readString();
        floorPositX = __is.readString();
        floorPositY = __is.readString();
        locateType = __is.readString();
        mac = __is.readString();
        status = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, LocationListIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public LocationListIce
    __read(IceInternal.BasicStream __is, LocationListIce __v)
    {
        if(__v == null)
        {
             __v = new LocationListIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final LocationListIce __nullMarshalValue = new LocationListIce();

    public static final long serialVersionUID = 1573341605L;
}
