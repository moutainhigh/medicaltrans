// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `spacemanage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.spacemanage;

public class FloorDetailIce implements java.lang.Cloneable, java.io.Serializable
{
    public String floorId;

    public String
    getFloorId()
    {
        return floorId;
    }

    public void
    setFloorId(String _floorId)
    {
        floorId = _floorId;
    }

    public String floorName;

    public String
    getFloorName()
    {
        return floorName;
    }

    public void
    setFloorName(String _floorName)
    {
        floorName = _floorName;
    }

    public String floorArea;

    public String
    getFloorArea()
    {
        return floorArea;
    }

    public void
    setFloorArea(String _floorArea)
    {
        floorArea = _floorArea;
    }

    public String floorType;

    public String
    getFloorType()
    {
        return floorType;
    }

    public void
    setFloorType(String _floorType)
    {
        floorType = _floorType;
    }

    public String sortNo;

    public String
    getSortNo()
    {
        return sortNo;
    }

    public void
    setSortNo(String _sortNo)
    {
        sortNo = _sortNo;
    }

    public String status;

    public String
    getStatus()
    {
        return status;
    }

    public void
    setStatus(String _status)
    {
        status = _status;
    }

    public String statusName;

    public String
    getStatusName()
    {
        return statusName;
    }

    public void
    setStatusName(String _statusName)
    {
        statusName = _statusName;
    }

    public String planUrl;

    public String
    getPlanUrl()
    {
        return planUrl;
    }

    public void
    setPlanUrl(String _planUrl)
    {
        planUrl = _planUrl;
    }

    public String remark;

    public String
    getRemark()
    {
        return remark;
    }

    public void
    setRemark(String _remark)
    {
        remark = _remark;
    }

    public String picUrl;

    public String
    getPicUrl()
    {
        return picUrl;
    }

    public void
    setPicUrl(String _picUrl)
    {
        picUrl = _picUrl;
    }

    public FloorDetailIce()
    {
        floorId = "";
        floorName = "";
        floorArea = "";
        floorType = "";
        sortNo = "";
        status = "";
        statusName = "";
        planUrl = "";
        remark = "";
        picUrl = "";
    }

    public FloorDetailIce(String floorId, String floorName, String floorArea, String floorType, String sortNo, String status, String statusName, String planUrl, String remark, String picUrl)
    {
        this.floorId = floorId;
        this.floorName = floorName;
        this.floorArea = floorArea;
        this.floorType = floorType;
        this.sortNo = sortNo;
        this.status = status;
        this.statusName = statusName;
        this.planUrl = planUrl;
        this.remark = remark;
        this.picUrl = picUrl;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FloorDetailIce _r = null;
        if(rhs instanceof FloorDetailIce)
        {
            _r = (FloorDetailIce)rhs;
        }

        if(_r != null)
        {
            if(floorId != _r.floorId)
            {
                if(floorId == null || _r.floorId == null || !floorId.equals(_r.floorId))
                {
                    return false;
                }
            }
            if(floorName != _r.floorName)
            {
                if(floorName == null || _r.floorName == null || !floorName.equals(_r.floorName))
                {
                    return false;
                }
            }
            if(floorArea != _r.floorArea)
            {
                if(floorArea == null || _r.floorArea == null || !floorArea.equals(_r.floorArea))
                {
                    return false;
                }
            }
            if(floorType != _r.floorType)
            {
                if(floorType == null || _r.floorType == null || !floorType.equals(_r.floorType))
                {
                    return false;
                }
            }
            if(sortNo != _r.sortNo)
            {
                if(sortNo == null || _r.sortNo == null || !sortNo.equals(_r.sortNo))
                {
                    return false;
                }
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }
            if(statusName != _r.statusName)
            {
                if(statusName == null || _r.statusName == null || !statusName.equals(_r.statusName))
                {
                    return false;
                }
            }
            if(planUrl != _r.planUrl)
            {
                if(planUrl == null || _r.planUrl == null || !planUrl.equals(_r.planUrl))
                {
                    return false;
                }
            }
            if(remark != _r.remark)
            {
                if(remark == null || _r.remark == null || !remark.equals(_r.remark))
                {
                    return false;
                }
            }
            if(picUrl != _r.picUrl)
            {
                if(picUrl == null || _r.picUrl == null || !picUrl.equals(_r.picUrl))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::spacemanage::FloorDetailIce");
        __h = IceInternal.HashUtil.hashAdd(__h, floorId);
        __h = IceInternal.HashUtil.hashAdd(__h, floorName);
        __h = IceInternal.HashUtil.hashAdd(__h, floorArea);
        __h = IceInternal.HashUtil.hashAdd(__h, floorType);
        __h = IceInternal.HashUtil.hashAdd(__h, sortNo);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, statusName);
        __h = IceInternal.HashUtil.hashAdd(__h, planUrl);
        __h = IceInternal.HashUtil.hashAdd(__h, remark);
        __h = IceInternal.HashUtil.hashAdd(__h, picUrl);
        return __h;
    }

    public FloorDetailIce
    clone()
    {
        FloorDetailIce c = null;
        try
        {
            c = (FloorDetailIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(floorId);
        __os.writeString(floorName);
        __os.writeString(floorArea);
        __os.writeString(floorType);
        __os.writeString(sortNo);
        __os.writeString(status);
        __os.writeString(statusName);
        __os.writeString(planUrl);
        __os.writeString(remark);
        __os.writeString(picUrl);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        floorId = __is.readString();
        floorName = __is.readString();
        floorArea = __is.readString();
        floorType = __is.readString();
        sortNo = __is.readString();
        status = __is.readString();
        statusName = __is.readString();
        planUrl = __is.readString();
        remark = __is.readString();
        picUrl = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, FloorDetailIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public FloorDetailIce
    __read(IceInternal.BasicStream __is, FloorDetailIce __v)
    {
        if(__v == null)
        {
             __v = new FloorDetailIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final FloorDetailIce __nullMarshalValue = new FloorDetailIce();

    public static final long serialVersionUID = 443949094L;
}
