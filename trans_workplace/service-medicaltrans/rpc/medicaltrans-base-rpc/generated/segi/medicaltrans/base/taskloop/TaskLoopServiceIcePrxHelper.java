// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `task_loop.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.taskloop;

/**
 * Provides type-specific helper functions.
 **/
public final class TaskLoopServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements TaskLoopServiceIcePrx
{
    private static final String __queryHouseList_name = "queryHouseList";

    public HouseInfo queryHouseList(String taskLoopId)
    {
        return queryHouseList(taskLoopId, null, false);
    }

    public HouseInfo queryHouseList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return queryHouseList(taskLoopId, __ctx, true);
    }

    private HouseInfo queryHouseList(String taskLoopId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryHouseList_name);
        return end_queryHouseList(begin_queryHouseList(taskLoopId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId)
    {
        return begin_queryHouseList(taskLoopId, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return begin_queryHouseList(taskLoopId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, Ice.Callback __cb)
    {
        return begin_queryHouseList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryHouseList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, Callback_TaskLoopServiceIce_queryHouseList __cb)
    {
        return begin_queryHouseList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_queryHouseList __cb)
    {
        return begin_queryHouseList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, 
                                                IceInternal.Functional_GenericCallback1<HouseInfo> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryHouseList(taskLoopId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, 
                                                IceInternal.Functional_GenericCallback1<HouseInfo> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHouseList(taskLoopId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<HouseInfo> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryHouseList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryHouseList(String taskLoopId, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<HouseInfo> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHouseList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryHouseList(String taskLoopId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<HouseInfo> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHouseList(taskLoopId, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.taskloop.HouseInfo>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                TaskLoopServiceIcePrxHelper.__queryHouseList_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_queryHouseList(String taskLoopId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryHouseList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryHouseList_name, __cb);
        try
        {
            __result.prepare(__queryHouseList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskLoopId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public HouseInfo end_queryHouseList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryHouseList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            HouseInfo __ret = null;
            __ret = HouseInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryHouseList_completed(Ice.TwowayCallbackArg1<HouseInfo> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        HouseInfo __ret = null;
        try
        {
            __ret = __proxy.end_queryHouseList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryTaskLoopByPage_name = "queryTaskLoopByPage";

    public TaskLoopPaginator queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam)
    {
        return queryTaskLoopByPage(taskLoopPageParam, null, false);
    }

    public TaskLoopPaginator queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, java.util.Map<String, String> __ctx)
    {
        return queryTaskLoopByPage(taskLoopPageParam, __ctx, true);
    }

    private TaskLoopPaginator queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTaskLoopByPage_name);
        return end_queryTaskLoopByPage(begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, java.util.Map<String, String> __ctx)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, Ice.Callback __cb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, Callback_TaskLoopServiceIce_queryTaskLoopByPage __cb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_queryTaskLoopByPage __cb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopPaginator> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopPaginator> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopPaginator> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopPaginator> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<TaskLoopPaginator> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskLoopByPage(taskLoopPageParam, __ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.taskloop.TaskLoopPaginator>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     TaskLoopServiceIcePrxHelper.__queryTaskLoopByPage_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTaskLoopByPage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTaskLoopByPage_name, __cb);
        try
        {
            __result.prepare(__queryTaskLoopByPage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TaskLoopPageParam.__write(__os, taskLoopPageParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TaskLoopPaginator end_queryTaskLoopByPage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTaskLoopByPage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TaskLoopPaginator __ret = null;
            __ret = TaskLoopPaginator.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTaskLoopByPage_completed(Ice.TwowayCallbackArg1<TaskLoopPaginator> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        TaskLoopPaginator __ret = null;
        try
        {
            __ret = __proxy.end_queryTaskLoopByPage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryTaskLoopDetail_name = "queryTaskLoopDetail";

    public TaskLoopInfo queryTaskLoopDetail(String taskLoopId)
    {
        return queryTaskLoopDetail(taskLoopId, null, false);
    }

    public TaskLoopInfo queryTaskLoopDetail(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return queryTaskLoopDetail(taskLoopId, __ctx, true);
    }

    private TaskLoopInfo queryTaskLoopDetail(String taskLoopId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTaskLoopDetail_name);
        return end_queryTaskLoopDetail(begin_queryTaskLoopDetail(taskLoopId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId)
    {
        return begin_queryTaskLoopDetail(taskLoopId, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return begin_queryTaskLoopDetail(taskLoopId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, Ice.Callback __cb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, Callback_TaskLoopServiceIce_queryTaskLoopDetail __cb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_queryTaskLoopDetail __cb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopInfo> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopInfo> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopInfo> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<TaskLoopInfo> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<TaskLoopInfo> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskLoopDetail(taskLoopId, __ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.taskloop.TaskLoopInfo>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     TaskLoopServiceIcePrxHelper.__queryTaskLoopDetail_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_queryTaskLoopDetail(String taskLoopId, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTaskLoopDetail_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTaskLoopDetail_name, __cb);
        try
        {
            __result.prepare(__queryTaskLoopDetail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskLoopId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TaskLoopInfo end_queryTaskLoopDetail(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTaskLoopDetail_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TaskLoopInfo __ret = null;
            __ret = TaskLoopInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTaskLoopDetail_completed(Ice.TwowayCallbackArg1<TaskLoopInfo> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        TaskLoopInfo __ret = null;
        try
        {
            __ret = __proxy.end_queryTaskLoopDetail(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryUserInfoList_name = "queryUserInfoList";

    public UserInfo queryUserInfoList(String taskLoopId)
    {
        return queryUserInfoList(taskLoopId, null, false);
    }

    public UserInfo queryUserInfoList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return queryUserInfoList(taskLoopId, __ctx, true);
    }

    private UserInfo queryUserInfoList(String taskLoopId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryUserInfoList_name);
        return end_queryUserInfoList(begin_queryUserInfoList(taskLoopId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId)
    {
        return begin_queryUserInfoList(taskLoopId, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return begin_queryUserInfoList(taskLoopId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, Ice.Callback __cb)
    {
        return begin_queryUserInfoList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryUserInfoList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, Callback_TaskLoopServiceIce_queryUserInfoList __cb)
    {
        return begin_queryUserInfoList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_queryUserInfoList __cb)
    {
        return begin_queryUserInfoList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, 
                                                   IceInternal.Functional_GenericCallback1<UserInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserInfoList(taskLoopId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, 
                                                   IceInternal.Functional_GenericCallback1<UserInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfoList(taskLoopId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserInfoList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfoList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<UserInfo> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfoList(taskLoopId, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.taskloop.UserInfo>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   TaskLoopServiceIcePrxHelper.__queryUserInfoList_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_queryUserInfoList(String taskLoopId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryUserInfoList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryUserInfoList_name, __cb);
        try
        {
            __result.prepare(__queryUserInfoList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskLoopId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserInfo end_queryUserInfoList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryUserInfoList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserInfo __ret = null;
            __ret = UserInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryUserInfoList_completed(Ice.TwowayCallbackArg1<UserInfo> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        UserInfo __ret = null;
        try
        {
            __ret = __proxy.end_queryUserInfoList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveTaskLoop_name = "saveTaskLoop";

    public resp.RpcRespIce saveTaskLoop(TaskLoopParam taskLoopParam)
    {
        return saveTaskLoop(taskLoopParam, null, false);
    }

    public resp.RpcRespIce saveTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx)
    {
        return saveTaskLoop(taskLoopParam, __ctx, true);
    }

    private resp.RpcRespIce saveTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveTaskLoop_name);
        return end_saveTaskLoop(begin_saveTaskLoop(taskLoopParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam)
    {
        return begin_saveTaskLoop(taskLoopParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx)
    {
        return begin_saveTaskLoop(taskLoopParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, Ice.Callback __cb)
    {
        return begin_saveTaskLoop(taskLoopParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveTaskLoop(taskLoopParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, Callback_TaskLoopServiceIce_saveTaskLoop __cb)
    {
        return begin_saveTaskLoop(taskLoopParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_saveTaskLoop __cb)
    {
        return begin_saveTaskLoop(taskLoopParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTaskLoop(taskLoopParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTaskLoop(taskLoopParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTaskLoop(taskLoopParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTaskLoop(taskLoopParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTaskLoop(taskLoopParam, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              TaskLoopServiceIcePrxHelper.__saveTaskLoop_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_saveTaskLoop(TaskLoopParam taskLoopParam, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveTaskLoop_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveTaskLoop_name, __cb);
        try
        {
            __result.prepare(__saveTaskLoop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TaskLoopParam.__write(__os, taskLoopParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_saveTaskLoop(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveTaskLoop_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveTaskLoop_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_saveTaskLoop(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateTaskLoop_name = "updateTaskLoop";

    public resp.RpcRespIce updateTaskLoop(TaskLoopParam taskLoopParam)
    {
        return updateTaskLoop(taskLoopParam, null, false);
    }

    public resp.RpcRespIce updateTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx)
    {
        return updateTaskLoop(taskLoopParam, __ctx, true);
    }

    private resp.RpcRespIce updateTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateTaskLoop_name);
        return end_updateTaskLoop(begin_updateTaskLoop(taskLoopParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam)
    {
        return begin_updateTaskLoop(taskLoopParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx)
    {
        return begin_updateTaskLoop(taskLoopParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, Ice.Callback __cb)
    {
        return begin_updateTaskLoop(taskLoopParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTaskLoop(taskLoopParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, Callback_TaskLoopServiceIce_updateTaskLoop __cb)
    {
        return begin_updateTaskLoop(taskLoopParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_updateTaskLoop __cb)
    {
        return begin_updateTaskLoop(taskLoopParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTaskLoop(taskLoopParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoop(taskLoopParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTaskLoop(taskLoopParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoop(taskLoopParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoop(taskLoopParam, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                TaskLoopServiceIcePrxHelper.__updateTaskLoop_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_updateTaskLoop(TaskLoopParam taskLoopParam, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTaskLoop_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateTaskLoop_name, __cb);
        try
        {
            __result.prepare(__updateTaskLoop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TaskLoopParam.__write(__os, taskLoopParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateTaskLoop(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateTaskLoop_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateTaskLoop_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateTaskLoop(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateTaskLoopStatus_name = "updateTaskLoopStatus";

    public resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam)
    {
        return updateTaskLoopStatus(taskLoopStatusParam, null, false);
    }

    public resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx)
    {
        return updateTaskLoopStatus(taskLoopStatusParam, __ctx, true);
    }

    private resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateTaskLoopStatus_name);
        return end_updateTaskLoopStatus(begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, Ice.Callback __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, Callback_TaskLoopServiceIce_updateTaskLoopStatus __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx, Callback_TaskLoopServiceIce_updateTaskLoopStatus __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      TaskLoopServiceIcePrxHelper.__updateTaskLoopStatus_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTaskLoopStatus_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateTaskLoopStatus_name, __cb);
        try
        {
            __result.prepare(__updateTaskLoopStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TaskLoopStatusParam.__write(__os, taskLoopStatusParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateTaskLoopStatus(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateTaskLoopStatus_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateTaskLoopStatus_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx __proxy = (segi.medicaltrans.base.taskloop.TaskLoopServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateTaskLoopStatus(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TaskLoopServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), TaskLoopServiceIcePrx.class, TaskLoopServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TaskLoopServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), TaskLoopServiceIcePrx.class, TaskLoopServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TaskLoopServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), TaskLoopServiceIcePrx.class, TaskLoopServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TaskLoopServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), TaskLoopServiceIcePrx.class, TaskLoopServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static TaskLoopServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, TaskLoopServiceIcePrx.class, TaskLoopServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static TaskLoopServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, TaskLoopServiceIcePrx.class, TaskLoopServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::base::taskloop::TaskLoopServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, TaskLoopServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static TaskLoopServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TaskLoopServiceIcePrxHelper result = new TaskLoopServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
