// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `transtype.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.transtype;

public class TransTypeRetIce implements java.lang.Cloneable, java.io.Serializable
{
    public String transTypeParentCode;

    public String
    getTransTypeParentCode()
    {
        return transTypeParentCode;
    }

    public void
    setTransTypeParentCode(String _transTypeParentCode)
    {
        transTypeParentCode = _transTypeParentCode;
    }

    public String transTypeParentCodeName;

    public String
    getTransTypeParentCodeName()
    {
        return transTypeParentCodeName;
    }

    public void
    setTransTypeParentCodeName(String _transTypeParentCodeName)
    {
        transTypeParentCodeName = _transTypeParentCodeName;
    }

    public java.util.List<TransTypeBaseIce> transTypeList;

    public java.util.List<TransTypeBaseIce>
    getTransTypeList()
    {
        return transTypeList;
    }

    public void
    setTransTypeList(java.util.List<TransTypeBaseIce> _transTypeList)
    {
        transTypeList = _transTypeList;
    }

    public TransTypeRetIce()
    {
        transTypeParentCode = "";
        transTypeParentCodeName = "";
    }

    public TransTypeRetIce(String transTypeParentCode, String transTypeParentCodeName, java.util.List<TransTypeBaseIce> transTypeList)
    {
        this.transTypeParentCode = transTypeParentCode;
        this.transTypeParentCodeName = transTypeParentCodeName;
        this.transTypeList = transTypeList;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TransTypeRetIce _r = null;
        if(rhs instanceof TransTypeRetIce)
        {
            _r = (TransTypeRetIce)rhs;
        }

        if(_r != null)
        {
            if(transTypeParentCode != _r.transTypeParentCode)
            {
                if(transTypeParentCode == null || _r.transTypeParentCode == null || !transTypeParentCode.equals(_r.transTypeParentCode))
                {
                    return false;
                }
            }
            if(transTypeParentCodeName != _r.transTypeParentCodeName)
            {
                if(transTypeParentCodeName == null || _r.transTypeParentCodeName == null || !transTypeParentCodeName.equals(_r.transTypeParentCodeName))
                {
                    return false;
                }
            }
            if(transTypeList != _r.transTypeList)
            {
                if(transTypeList == null || _r.transTypeList == null || !transTypeList.equals(_r.transTypeList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::transtype::TransTypeRetIce");
        __h = IceInternal.HashUtil.hashAdd(__h, transTypeParentCode);
        __h = IceInternal.HashUtil.hashAdd(__h, transTypeParentCodeName);
        __h = IceInternal.HashUtil.hashAdd(__h, transTypeList);
        return __h;
    }

    public TransTypeRetIce
    clone()
    {
        TransTypeRetIce c = null;
        try
        {
            c = (TransTypeRetIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(transTypeParentCode);
        __os.writeString(transTypeParentCodeName);
        TransTypeBaseListIceHelper.write(__os, transTypeList);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        transTypeParentCode = __is.readString();
        transTypeParentCodeName = __is.readString();
        transTypeList = TransTypeBaseListIceHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, TransTypeRetIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TransTypeRetIce
    __read(IceInternal.BasicStream __is, TransTypeRetIce __v)
    {
        if(__v == null)
        {
             __v = new TransTypeRetIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TransTypeRetIce __nullMarshalValue = new TransTypeRetIce();

    public static final long serialVersionUID = 2007662491L;
}
