// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `userposit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.userposit;

public class UserPositRetIce implements java.lang.Cloneable, java.io.Serializable
{
    public String locationId;

    public String
    getLocationId()
    {
        return locationId;
    }

    public void
    setLocationId(String _locationId)
    {
        locationId = _locationId;
    }

    public String locationName;

    public String
    getLocationName()
    {
        return locationName;
    }

    public void
    setLocationName(String _locationName)
    {
        locationName = _locationName;
    }

    public String updateDate;

    public String
    getUpdateDate()
    {
        return updateDate;
    }

    public void
    setUpdateDate(String _updateDate)
    {
        updateDate = _updateDate;
    }

    public UserPositRetIce()
    {
        locationId = "";
        locationName = "";
        updateDate = "";
    }

    public UserPositRetIce(String locationId, String locationName, String updateDate)
    {
        this.locationId = locationId;
        this.locationName = locationName;
        this.updateDate = updateDate;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UserPositRetIce _r = null;
        if(rhs instanceof UserPositRetIce)
        {
            _r = (UserPositRetIce)rhs;
        }

        if(_r != null)
        {
            if(locationId != _r.locationId)
            {
                if(locationId == null || _r.locationId == null || !locationId.equals(_r.locationId))
                {
                    return false;
                }
            }
            if(locationName != _r.locationName)
            {
                if(locationName == null || _r.locationName == null || !locationName.equals(_r.locationName))
                {
                    return false;
                }
            }
            if(updateDate != _r.updateDate)
            {
                if(updateDate == null || _r.updateDate == null || !updateDate.equals(_r.updateDate))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::userposit::UserPositRetIce");
        __h = IceInternal.HashUtil.hashAdd(__h, locationId);
        __h = IceInternal.HashUtil.hashAdd(__h, locationName);
        __h = IceInternal.HashUtil.hashAdd(__h, updateDate);
        return __h;
    }

    public UserPositRetIce
    clone()
    {
        UserPositRetIce c = null;
        try
        {
            c = (UserPositRetIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(locationId);
        __os.writeString(locationName);
        __os.writeString(updateDate);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        locationId = __is.readString();
        locationName = __is.readString();
        updateDate = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, UserPositRetIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public UserPositRetIce
    __read(IceInternal.BasicStream __is, UserPositRetIce __v)
    {
        if(__v == null)
        {
             __v = new UserPositRetIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final UserPositRetIce __nullMarshalValue = new UserPositRetIce();

    public static final long serialVersionUID = -1651037389L;
}
