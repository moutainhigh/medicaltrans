// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_userhosp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.userhosp;

/**
 * Provides type-specific helper functions.
 **/
public final class UserHospServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements UserHospServiceIcePrx
{
    private static final String __queryHospUserPad_name = "queryHospUserPad";

    public UserHospRelReturnPadIce queryHospUserPad(UserHospIce userHospIce)
    {
        return queryHospUserPad(userHospIce, null, false);
    }

    public UserHospRelReturnPadIce queryHospUserPad(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return queryHospUserPad(userHospIce, __ctx, true);
    }

    private UserHospRelReturnPadIce queryHospUserPad(UserHospIce userHospIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryHospUserPad_name);
        return end_queryHospUserPad(begin_queryHospUserPad(userHospIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce)
    {
        return begin_queryHospUserPad(userHospIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return begin_queryHospUserPad(userHospIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, Ice.Callback __cb)
    {
        return begin_queryHospUserPad(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryHospUserPad(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, Callback_UserHospServiceIce_queryHospUserPad __cb)
    {
        return begin_queryHospUserPad(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Callback_UserHospServiceIce_queryHospUserPad __cb)
    {
        return begin_queryHospUserPad(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, 
                                                  IceInternal.Functional_GenericCallback1<UserHospRelReturnPadIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryHospUserPad(userHospIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, 
                                                  IceInternal.Functional_GenericCallback1<UserHospRelReturnPadIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHospUserPad(userHospIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<UserHospRelReturnPadIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryHospUserPad(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<UserHospRelReturnPadIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHospUserPad(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRelReturnPadIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryHospUserPad(userHospIce, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.userhosp.UserHospRelReturnPadIce>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  UserHospServiceIcePrxHelper.__queryHospUserPad_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_queryHospUserPad(UserHospIce userHospIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryHospUserPad_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryHospUserPad_name, __cb);
        try
        {
            __result.prepare(__queryHospUserPad_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserHospIce.__write(__os, userHospIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserHospRelReturnPadIce end_queryHospUserPad(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryHospUserPad_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserHospRelReturnPadIce __ret = null;
            __ret = UserHospRelReturnPadIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryHospUserPad_completed(Ice.TwowayCallbackArg1<UserHospRelReturnPadIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.userhosp.UserHospServiceIcePrx __proxy = (segi.medicaltrans.base.userhosp.UserHospServiceIcePrx)__result.getProxy();
        UserHospRelReturnPadIce __ret = null;
        try
        {
            __ret = __proxy.end_queryHospUserPad(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryUserHospInfo_name = "queryUserHospInfo";

    public UserHospRelReturnIce queryUserHospInfo(UserHospIce userHospIce)
    {
        return queryUserHospInfo(userHospIce, null, false);
    }

    public UserHospRelReturnIce queryUserHospInfo(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return queryUserHospInfo(userHospIce, __ctx, true);
    }

    private UserHospRelReturnIce queryUserHospInfo(UserHospIce userHospIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryUserHospInfo_name);
        return end_queryUserHospInfo(begin_queryUserHospInfo(userHospIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce)
    {
        return begin_queryUserHospInfo(userHospIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return begin_queryUserHospInfo(userHospIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, Ice.Callback __cb)
    {
        return begin_queryUserHospInfo(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryUserHospInfo(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, Callback_UserHospServiceIce_queryUserHospInfo __cb)
    {
        return begin_queryUserHospInfo(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Callback_UserHospServiceIce_queryUserHospInfo __cb)
    {
        return begin_queryUserHospInfo(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRelReturnIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserHospInfo(userHospIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRelReturnIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserHospInfo(userHospIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRelReturnIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserHospInfo(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRelReturnIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserHospInfo(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<UserHospRelReturnIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserHospInfo(userHospIce, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.userhosp.UserHospRelReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   UserHospServiceIcePrxHelper.__queryUserHospInfo_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_queryUserHospInfo(UserHospIce userHospIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryUserHospInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryUserHospInfo_name, __cb);
        try
        {
            __result.prepare(__queryUserHospInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserHospIce.__write(__os, userHospIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserHospRelReturnIce end_queryUserHospInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryUserHospInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserHospRelReturnIce __ret = null;
            __ret = UserHospRelReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryUserHospInfo_completed(Ice.TwowayCallbackArg1<UserHospRelReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.userhosp.UserHospServiceIcePrx __proxy = (segi.medicaltrans.base.userhosp.UserHospServiceIcePrx)__result.getProxy();
        UserHospRelReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_queryUserHospInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryUserHospPage_name = "queryUserHospPage";

    public UserHospRetPageIce queryUserHospPage(UserHospIce userHospIce)
    {
        return queryUserHospPage(userHospIce, null, false);
    }

    public UserHospRetPageIce queryUserHospPage(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return queryUserHospPage(userHospIce, __ctx, true);
    }

    private UserHospRetPageIce queryUserHospPage(UserHospIce userHospIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryUserHospPage_name);
        return end_queryUserHospPage(begin_queryUserHospPage(userHospIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce)
    {
        return begin_queryUserHospPage(userHospIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return begin_queryUserHospPage(userHospIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, Ice.Callback __cb)
    {
        return begin_queryUserHospPage(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryUserHospPage(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, Callback_UserHospServiceIce_queryUserHospPage __cb)
    {
        return begin_queryUserHospPage(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Callback_UserHospServiceIce_queryUserHospPage __cb)
    {
        return begin_queryUserHospPage(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRetPageIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserHospPage(userHospIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRetPageIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserHospPage(userHospIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRetPageIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserHospPage(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserHospRetPageIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserHospPage(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<UserHospRetPageIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserHospPage(userHospIce, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.base.userhosp.UserHospRetPageIce>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   UserHospServiceIcePrxHelper.__queryUserHospPage_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_queryUserHospPage(UserHospIce userHospIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryUserHospPage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryUserHospPage_name, __cb);
        try
        {
            __result.prepare(__queryUserHospPage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserHospIce.__write(__os, userHospIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserHospRetPageIce end_queryUserHospPage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryUserHospPage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserHospRetPageIce __ret = null;
            __ret = UserHospRetPageIce.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryUserHospPage_completed(Ice.TwowayCallbackArg1<UserHospRetPageIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.userhosp.UserHospServiceIcePrx __proxy = (segi.medicaltrans.base.userhosp.UserHospServiceIcePrx)__result.getProxy();
        UserHospRetPageIce __ret = null;
        try
        {
            __ret = __proxy.end_queryUserHospPage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveUserHospInfo_name = "saveUserHospInfo";

    public resp.RpcRespIce saveUserHospInfo(UserHospParamIce userHospParamIce)
    {
        return saveUserHospInfo(userHospParamIce, null, false);
    }

    public resp.RpcRespIce saveUserHospInfo(UserHospParamIce userHospParamIce, java.util.Map<String, String> __ctx)
    {
        return saveUserHospInfo(userHospParamIce, __ctx, true);
    }

    private resp.RpcRespIce saveUserHospInfo(UserHospParamIce userHospParamIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveUserHospInfo_name);
        return end_saveUserHospInfo(begin_saveUserHospInfo(userHospParamIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce)
    {
        return begin_saveUserHospInfo(userHospParamIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, java.util.Map<String, String> __ctx)
    {
        return begin_saveUserHospInfo(userHospParamIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, Ice.Callback __cb)
    {
        return begin_saveUserHospInfo(userHospParamIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveUserHospInfo(userHospParamIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, Callback_UserHospServiceIce_saveUserHospInfo __cb)
    {
        return begin_saveUserHospInfo(userHospParamIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, java.util.Map<String, String> __ctx, Callback_UserHospServiceIce_saveUserHospInfo __cb)
    {
        return begin_saveUserHospInfo(userHospParamIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveUserHospInfo(userHospParamIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveUserHospInfo(userHospParamIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveUserHospInfo(userHospParamIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveUserHospInfo(userHospParamIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveUserHospInfo(userHospParamIce, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  UserHospServiceIcePrxHelper.__saveUserHospInfo_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_saveUserHospInfo(UserHospParamIce userHospParamIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveUserHospInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveUserHospInfo_name, __cb);
        try
        {
            __result.prepare(__saveUserHospInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserHospParamIce.__write(__os, userHospParamIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_saveUserHospInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveUserHospInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveUserHospInfo_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.userhosp.UserHospServiceIcePrx __proxy = (segi.medicaltrans.base.userhosp.UserHospServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_saveUserHospInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __switchoverUserHosp_name = "switchoverUserHosp";

    public resp.RpcRespIce switchoverUserHosp(UserHospIce userHospIce)
    {
        return switchoverUserHosp(userHospIce, null, false);
    }

    public resp.RpcRespIce switchoverUserHosp(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return switchoverUserHosp(userHospIce, __ctx, true);
    }

    private resp.RpcRespIce switchoverUserHosp(UserHospIce userHospIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__switchoverUserHosp_name);
        return end_switchoverUserHosp(begin_switchoverUserHosp(userHospIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce)
    {
        return begin_switchoverUserHosp(userHospIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, java.util.Map<String, String> __ctx)
    {
        return begin_switchoverUserHosp(userHospIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, Ice.Callback __cb)
    {
        return begin_switchoverUserHosp(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_switchoverUserHosp(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, Callback_UserHospServiceIce_switchoverUserHosp __cb)
    {
        return begin_switchoverUserHosp(userHospIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, java.util.Map<String, String> __ctx, Callback_UserHospServiceIce_switchoverUserHosp __cb)
    {
        return begin_switchoverUserHosp(userHospIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, 
                                                    IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_switchoverUserHosp(userHospIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, 
                                                    IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_switchoverUserHosp(userHospIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_switchoverUserHosp(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_switchoverUserHosp(userHospIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_switchoverUserHosp(userHospIce, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    UserHospServiceIcePrxHelper.__switchoverUserHosp_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_switchoverUserHosp(UserHospIce userHospIce, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__switchoverUserHosp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__switchoverUserHosp_name, __cb);
        try
        {
            __result.prepare(__switchoverUserHosp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserHospIce.__write(__os, userHospIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_switchoverUserHosp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __switchoverUserHosp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __switchoverUserHosp_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.base.userhosp.UserHospServiceIcePrx __proxy = (segi.medicaltrans.base.userhosp.UserHospServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_switchoverUserHosp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserHospServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), UserHospServiceIcePrx.class, UserHospServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserHospServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), UserHospServiceIcePrx.class, UserHospServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserHospServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), UserHospServiceIcePrx.class, UserHospServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserHospServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), UserHospServiceIcePrx.class, UserHospServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static UserHospServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, UserHospServiceIcePrx.class, UserHospServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static UserHospServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, UserHospServiceIcePrx.class, UserHospServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::base::userhosp::UserHospServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, UserHospServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static UserHospServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UserHospServiceIcePrxHelper result = new UserHospServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
