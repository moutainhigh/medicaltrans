// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `spacemanage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.spacemanage;

public class UnitDetailIce implements java.lang.Cloneable, java.io.Serializable
{
    public String unitId;

    public String
    getUnitId()
    {
        return unitId;
    }

    public void
    setUnitId(String _unitId)
    {
        unitId = _unitId;
    }

    public String unitName;

    public String
    getUnitName()
    {
        return unitName;
    }

    public void
    setUnitName(String _unitName)
    {
        unitName = _unitName;
    }

    public String sortNo;

    public String
    getSortNo()
    {
        return sortNo;
    }

    public void
    setSortNo(String _sortNo)
    {
        sortNo = _sortNo;
    }

    public String status;

    public String
    getStatus()
    {
        return status;
    }

    public void
    setStatus(String _status)
    {
        status = _status;
    }

    public String statusName;

    public String
    getStatusName()
    {
        return statusName;
    }

    public void
    setStatusName(String _statusName)
    {
        statusName = _statusName;
    }

    public String remark;

    public String
    getRemark()
    {
        return remark;
    }

    public void
    setRemark(String _remark)
    {
        remark = _remark;
    }

    public String picUrl;

    public String
    getPicUrl()
    {
        return picUrl;
    }

    public void
    setPicUrl(String _picUrl)
    {
        picUrl = _picUrl;
    }

    public UnitDetailIce()
    {
        unitId = "";
        unitName = "";
        sortNo = "";
        status = "";
        statusName = "";
        remark = "";
        picUrl = "";
    }

    public UnitDetailIce(String unitId, String unitName, String sortNo, String status, String statusName, String remark, String picUrl)
    {
        this.unitId = unitId;
        this.unitName = unitName;
        this.sortNo = sortNo;
        this.status = status;
        this.statusName = statusName;
        this.remark = remark;
        this.picUrl = picUrl;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UnitDetailIce _r = null;
        if(rhs instanceof UnitDetailIce)
        {
            _r = (UnitDetailIce)rhs;
        }

        if(_r != null)
        {
            if(unitId != _r.unitId)
            {
                if(unitId == null || _r.unitId == null || !unitId.equals(_r.unitId))
                {
                    return false;
                }
            }
            if(unitName != _r.unitName)
            {
                if(unitName == null || _r.unitName == null || !unitName.equals(_r.unitName))
                {
                    return false;
                }
            }
            if(sortNo != _r.sortNo)
            {
                if(sortNo == null || _r.sortNo == null || !sortNo.equals(_r.sortNo))
                {
                    return false;
                }
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }
            if(statusName != _r.statusName)
            {
                if(statusName == null || _r.statusName == null || !statusName.equals(_r.statusName))
                {
                    return false;
                }
            }
            if(remark != _r.remark)
            {
                if(remark == null || _r.remark == null || !remark.equals(_r.remark))
                {
                    return false;
                }
            }
            if(picUrl != _r.picUrl)
            {
                if(picUrl == null || _r.picUrl == null || !picUrl.equals(_r.picUrl))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::spacemanage::UnitDetailIce");
        __h = IceInternal.HashUtil.hashAdd(__h, unitId);
        __h = IceInternal.HashUtil.hashAdd(__h, unitName);
        __h = IceInternal.HashUtil.hashAdd(__h, sortNo);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, statusName);
        __h = IceInternal.HashUtil.hashAdd(__h, remark);
        __h = IceInternal.HashUtil.hashAdd(__h, picUrl);
        return __h;
    }

    public UnitDetailIce
    clone()
    {
        UnitDetailIce c = null;
        try
        {
            c = (UnitDetailIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(unitId);
        __os.writeString(unitName);
        __os.writeString(sortNo);
        __os.writeString(status);
        __os.writeString(statusName);
        __os.writeString(remark);
        __os.writeString(picUrl);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        unitId = __is.readString();
        unitName = __is.readString();
        sortNo = __is.readString();
        status = __is.readString();
        statusName = __is.readString();
        remark = __is.readString();
        picUrl = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, UnitDetailIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public UnitDetailIce
    __read(IceInternal.BasicStream __is, UnitDetailIce __v)
    {
        if(__v == null)
        {
             __v = new UnitDetailIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final UnitDetailIce __nullMarshalValue = new UnitDetailIce();

    public static final long serialVersionUID = 1192372904L;
}
