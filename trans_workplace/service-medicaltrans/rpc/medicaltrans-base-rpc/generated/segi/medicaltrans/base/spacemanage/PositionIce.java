// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `spacemanage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.spacemanage;

public class PositionIce implements java.lang.Cloneable, java.io.Serializable
{
    public String positionId;

    public String
    getPositionId()
    {
        return positionId;
    }

    public void
    setPositionId(String _positionId)
    {
        positionId = _positionId;
    }

    public String positionName;

    public String
    getPositionName()
    {
        return positionName;
    }

    public void
    setPositionName(String _positionName)
    {
        positionName = _positionName;
    }

    public String upPositionId;

    public String
    getUpPositionId()
    {
        return upPositionId;
    }

    public void
    setUpPositionId(String _upPositionId)
    {
        upPositionId = _upPositionId;
    }

    public String status;

    public String
    getStatus()
    {
        return status;
    }

    public void
    setStatus(String _status)
    {
        status = _status;
    }

    public String positionType;

    public String
    getPositionType()
    {
        return positionType;
    }

    public void
    setPositionType(String _positionType)
    {
        positionType = _positionType;
    }

    public String subPositionType;

    public String
    getSubPositionType()
    {
        return subPositionType;
    }

    public void
    setSubPositionType(String _subPositionType)
    {
        subPositionType = _subPositionType;
    }

    public String unitId;

    public String
    getUnitId()
    {
        return unitId;
    }

    public void
    setUnitId(String _unitId)
    {
        unitId = _unitId;
    }

    public PositionIce()
    {
        positionId = "";
        positionName = "";
        upPositionId = "";
        status = "";
        positionType = "";
        subPositionType = "";
        unitId = "";
    }

    public PositionIce(String positionId, String positionName, String upPositionId, String status, String positionType, String subPositionType, String unitId)
    {
        this.positionId = positionId;
        this.positionName = positionName;
        this.upPositionId = upPositionId;
        this.status = status;
        this.positionType = positionType;
        this.subPositionType = subPositionType;
        this.unitId = unitId;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PositionIce _r = null;
        if(rhs instanceof PositionIce)
        {
            _r = (PositionIce)rhs;
        }

        if(_r != null)
        {
            if(positionId != _r.positionId)
            {
                if(positionId == null || _r.positionId == null || !positionId.equals(_r.positionId))
                {
                    return false;
                }
            }
            if(positionName != _r.positionName)
            {
                if(positionName == null || _r.positionName == null || !positionName.equals(_r.positionName))
                {
                    return false;
                }
            }
            if(upPositionId != _r.upPositionId)
            {
                if(upPositionId == null || _r.upPositionId == null || !upPositionId.equals(_r.upPositionId))
                {
                    return false;
                }
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }
            if(positionType != _r.positionType)
            {
                if(positionType == null || _r.positionType == null || !positionType.equals(_r.positionType))
                {
                    return false;
                }
            }
            if(subPositionType != _r.subPositionType)
            {
                if(subPositionType == null || _r.subPositionType == null || !subPositionType.equals(_r.subPositionType))
                {
                    return false;
                }
            }
            if(unitId != _r.unitId)
            {
                if(unitId == null || _r.unitId == null || !unitId.equals(_r.unitId))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::spacemanage::PositionIce");
        __h = IceInternal.HashUtil.hashAdd(__h, positionId);
        __h = IceInternal.HashUtil.hashAdd(__h, positionName);
        __h = IceInternal.HashUtil.hashAdd(__h, upPositionId);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, positionType);
        __h = IceInternal.HashUtil.hashAdd(__h, subPositionType);
        __h = IceInternal.HashUtil.hashAdd(__h, unitId);
        return __h;
    }

    public PositionIce
    clone()
    {
        PositionIce c = null;
        try
        {
            c = (PositionIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(positionId);
        __os.writeString(positionName);
        __os.writeString(upPositionId);
        __os.writeString(status);
        __os.writeString(positionType);
        __os.writeString(subPositionType);
        __os.writeString(unitId);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        positionId = __is.readString();
        positionName = __is.readString();
        upPositionId = __is.readString();
        status = __is.readString();
        positionType = __is.readString();
        subPositionType = __is.readString();
        unitId = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, PositionIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public PositionIce
    __read(IceInternal.BasicStream __is, PositionIce __v)
    {
        if(__v == null)
        {
             __v = new PositionIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final PositionIce __nullMarshalValue = new PositionIce();

    public static final long serialVersionUID = -48617117L;
}
