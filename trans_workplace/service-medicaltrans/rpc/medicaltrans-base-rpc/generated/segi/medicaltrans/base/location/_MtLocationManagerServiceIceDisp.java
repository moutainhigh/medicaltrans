// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_location_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.location;

public abstract class _MtLocationManagerServiceIceDisp extends Ice.ObjectImpl implements MtLocationManagerServiceIce
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::base::location::MtLocationManagerServiceIce"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final resp.RpcRespIce deleteMtBuildLocation(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return deleteMtBuildLocation(mtBuildLocationIceParam, null);
    }

    public final MtBuildLocationDetailReturnIce getLocationInfoByMac(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return getLocationInfoByMac(mtBuildLocationIceParam, null);
    }

    public final String queryLocationByOrganIdRedis(String organId)
    {
        return queryLocationByOrganIdRedis(organId, null);
    }

    public final LocationInfoListReturnIce queryLocationListByFloorId(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return queryLocationListByFloorId(mtBuildLocationIceParam, null);
    }

    public final LocationInfoPaginatorIce queryLocationPageByFloorId(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return queryLocationPageByFloorId(mtBuildLocationIceParam, null);
    }

    public final LocationInfoPaginatorIce queryLocationPageByOrgName(MtBuildLocationQueryIceParam mtBuildLocationQueryIceParam)
    {
        return queryLocationPageByOrgName(mtBuildLocationQueryIceParam, null);
    }

    public final LocationInfoPaginatorIce queryLocationPageByOrgNameDefault(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return queryLocationPageByOrgNameDefault(mtBuildLocationIceParam, null);
    }

    public final MtBuildLocationDetailReturnIce queryMtBuildLocationDetail(String locationId)
    {
        return queryMtBuildLocationDetail(locationId, null);
    }

    public final resp.RpcRespIce saveMtBuildLocation(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return saveMtBuildLocation(mtBuildLocationIceParam, null);
    }

    public final resp.RpcRespIce updateMtBuildLocation(MtBuildLocationIceParam mtBuildLocationIceParam)
    {
        return updateMtBuildLocation(mtBuildLocationIceParam, null);
    }

    public static Ice.DispatchStatus ___saveMtBuildLocation(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.saveMtBuildLocation(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryMtBuildLocationDetail(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String locationId;
        locationId = __is.readString();
        __inS.endReadParams();
        MtBuildLocationDetailReturnIce __ret = __obj.queryMtBuildLocationDetail(locationId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtBuildLocationDetailReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getLocationInfoByMac(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        MtBuildLocationDetailReturnIce __ret = __obj.getLocationInfoByMac(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtBuildLocationDetailReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___updateMtBuildLocation(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.updateMtBuildLocation(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___deleteMtBuildLocation(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.deleteMtBuildLocation(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryLocationPageByFloorId(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        LocationInfoPaginatorIce __ret = __obj.queryLocationPageByFloorId(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        LocationInfoPaginatorIce.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryLocationListByFloorId(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        LocationInfoListReturnIce __ret = __obj.queryLocationListByFloorId(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        LocationInfoListReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryLocationPageByOrgName(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationQueryIceParam mtBuildLocationQueryIceParam = null;
        mtBuildLocationQueryIceParam = MtBuildLocationQueryIceParam.__read(__is, mtBuildLocationQueryIceParam);
        __inS.endReadParams();
        LocationInfoPaginatorIce __ret = __obj.queryLocationPageByOrgName(mtBuildLocationQueryIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        LocationInfoPaginatorIce.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryLocationPageByOrgNameDefault(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtBuildLocationIceParam mtBuildLocationIceParam = null;
        mtBuildLocationIceParam = MtBuildLocationIceParam.__read(__is, mtBuildLocationIceParam);
        __inS.endReadParams();
        LocationInfoPaginatorIce __ret = __obj.queryLocationPageByOrgNameDefault(mtBuildLocationIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        LocationInfoPaginatorIce.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryLocationByOrganIdRedis(MtLocationManagerServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String organId;
        organId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.queryLocationByOrganIdRedis(organId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "deleteMtBuildLocation",
        "getLocationInfoByMac",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryLocationByOrganIdRedis",
        "queryLocationListByFloorId",
        "queryLocationPageByFloorId",
        "queryLocationPageByOrgName",
        "queryLocationPageByOrgNameDefault",
        "queryMtBuildLocationDetail",
        "saveMtBuildLocation",
        "updateMtBuildLocation"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___deleteMtBuildLocation(this, in, __current);
            }
            case 1:
            {
                return ___getLocationInfoByMac(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___queryLocationByOrganIdRedis(this, in, __current);
            }
            case 7:
            {
                return ___queryLocationListByFloorId(this, in, __current);
            }
            case 8:
            {
                return ___queryLocationPageByFloorId(this, in, __current);
            }
            case 9:
            {
                return ___queryLocationPageByOrgName(this, in, __current);
            }
            case 10:
            {
                return ___queryLocationPageByOrgNameDefault(this, in, __current);
            }
            case 11:
            {
                return ___queryMtBuildLocationDetail(this, in, __current);
            }
            case 12:
            {
                return ___saveMtBuildLocation(this, in, __current);
            }
            case 13:
            {
                return ___updateMtBuildLocation(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
