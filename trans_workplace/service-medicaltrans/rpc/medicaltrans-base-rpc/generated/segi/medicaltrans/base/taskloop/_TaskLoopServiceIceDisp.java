// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `task_loop.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.taskloop;

public abstract class _TaskLoopServiceIceDisp extends Ice.ObjectImpl implements TaskLoopServiceIce
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::base::taskloop::TaskLoopServiceIce"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final HouseInfo queryHouseList(String taskLoopId)
    {
        return queryHouseList(taskLoopId, null);
    }

    public final TaskLoopPaginator queryTaskLoopByPage(TaskLoopPageParam taskLoopPageParam)
    {
        return queryTaskLoopByPage(taskLoopPageParam, null);
    }

    public final TaskLoopInfo queryTaskLoopDetail(String taskLoopId)
    {
        return queryTaskLoopDetail(taskLoopId, null);
    }

    public final UserInfo queryUserInfoList(String taskLoopId)
    {
        return queryUserInfoList(taskLoopId, null);
    }

    public final resp.RpcRespIce saveTaskLoop(TaskLoopParam taskLoopParam)
    {
        return saveTaskLoop(taskLoopParam, null);
    }

    public final resp.RpcRespIce updateTaskLoop(TaskLoopParam taskLoopParam)
    {
        return updateTaskLoop(taskLoopParam, null);
    }

    public final resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam)
    {
        return updateTaskLoopStatus(taskLoopStatusParam, null);
    }

    public static Ice.DispatchStatus ___queryTaskLoopByPage(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskLoopPageParam taskLoopPageParam = null;
        taskLoopPageParam = TaskLoopPageParam.__read(__is, taskLoopPageParam);
        __inS.endReadParams();
        TaskLoopPaginator __ret = __obj.queryTaskLoopByPage(taskLoopPageParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        TaskLoopPaginator.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___saveTaskLoop(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskLoopParam taskLoopParam = null;
        taskLoopParam = TaskLoopParam.__read(__is, taskLoopParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.saveTaskLoop(taskLoopParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___updateTaskLoop(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskLoopParam taskLoopParam = null;
        taskLoopParam = TaskLoopParam.__read(__is, taskLoopParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.updateTaskLoop(taskLoopParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___updateTaskLoopStatus(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskLoopStatusParam taskLoopStatusParam = null;
        taskLoopStatusParam = TaskLoopStatusParam.__read(__is, taskLoopStatusParam);
        __inS.endReadParams();
        resp.RpcRespIce __ret = __obj.updateTaskLoopStatus(taskLoopStatusParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryTaskLoopDetail(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskLoopId;
        taskLoopId = __is.readString();
        __inS.endReadParams();
        TaskLoopInfo __ret = __obj.queryTaskLoopDetail(taskLoopId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        TaskLoopInfo.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryHouseList(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskLoopId;
        taskLoopId = __is.readString();
        __inS.endReadParams();
        HouseInfo __ret = __obj.queryHouseList(taskLoopId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        HouseInfo.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryUserInfoList(TaskLoopServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskLoopId;
        taskLoopId = __is.readString();
        __inS.endReadParams();
        UserInfo __ret = __obj.queryUserInfoList(taskLoopId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        UserInfo.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryHouseList",
        "queryTaskLoopByPage",
        "queryTaskLoopDetail",
        "queryUserInfoList",
        "saveTaskLoop",
        "updateTaskLoop",
        "updateTaskLoopStatus"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___ice_id(this, in, __current);
            }
            case 1:
            {
                return ___ice_ids(this, in, __current);
            }
            case 2:
            {
                return ___ice_isA(this, in, __current);
            }
            case 3:
            {
                return ___ice_ping(this, in, __current);
            }
            case 4:
            {
                return ___queryHouseList(this, in, __current);
            }
            case 5:
            {
                return ___queryTaskLoopByPage(this, in, __current);
            }
            case 6:
            {
                return ___queryTaskLoopDetail(this, in, __current);
            }
            case 7:
            {
                return ___queryUserInfoList(this, in, __current);
            }
            case 8:
            {
                return ___saveTaskLoop(this, in, __current);
            }
            case 9:
            {
                return ___updateTaskLoop(this, in, __current);
            }
            case 10:
            {
                return ___updateTaskLoopStatus(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
