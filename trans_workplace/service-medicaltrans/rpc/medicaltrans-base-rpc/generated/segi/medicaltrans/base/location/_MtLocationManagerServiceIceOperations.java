// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_location_manager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.location;

public interface _MtLocationManagerServiceIceOperations
{
    resp.RpcRespIce saveMtBuildLocation(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    MtBuildLocationDetailReturnIce queryMtBuildLocationDetail(String locationId, Ice.Current __current);

    MtBuildLocationDetailReturnIce getLocationInfoByMac(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    resp.RpcRespIce updateMtBuildLocation(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    resp.RpcRespIce deleteMtBuildLocation(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    LocationInfoPaginatorIce queryLocationPageByFloorId(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    LocationInfoListReturnIce queryLocationListByFloorId(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    LocationInfoPaginatorIce queryLocationPageByOrgName(MtBuildLocationQueryIceParam mtBuildLocationQueryIceParam, Ice.Current __current);

    LocationInfoPaginatorIce queryLocationPageByOrgNameDefault(MtBuildLocationIceParam mtBuildLocationIceParam, Ice.Current __current);

    String queryLocationByOrganIdRedis(String organId, Ice.Current __current);
}
