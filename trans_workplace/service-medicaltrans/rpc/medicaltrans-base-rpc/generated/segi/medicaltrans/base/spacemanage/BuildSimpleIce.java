// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `spacemanage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.base.spacemanage;

public class BuildSimpleIce implements java.lang.Cloneable, java.io.Serializable
{
    public String buildId;

    public String
    getBuildId()
    {
        return buildId;
    }

    public void
    setBuildId(String _buildId)
    {
        buildId = _buildId;
    }

    public String name;

    public String
    getName()
    {
        return name;
    }

    public void
    setName(String _name)
    {
        name = _name;
    }

    public String sortNo;

    public String
    getSortNo()
    {
        return sortNo;
    }

    public void
    setSortNo(String _sortNo)
    {
        sortNo = _sortNo;
    }

    public BuildSimpleIce()
    {
        buildId = "";
        name = "";
        sortNo = "";
    }

    public BuildSimpleIce(String buildId, String name, String sortNo)
    {
        this.buildId = buildId;
        this.name = name;
        this.sortNo = sortNo;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BuildSimpleIce _r = null;
        if(rhs instanceof BuildSimpleIce)
        {
            _r = (BuildSimpleIce)rhs;
        }

        if(_r != null)
        {
            if(buildId != _r.buildId)
            {
                if(buildId == null || _r.buildId == null || !buildId.equals(_r.buildId))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(sortNo != _r.sortNo)
            {
                if(sortNo == null || _r.sortNo == null || !sortNo.equals(_r.sortNo))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::medicaltrans::base::spacemanage::BuildSimpleIce");
        __h = IceInternal.HashUtil.hashAdd(__h, buildId);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, sortNo);
        return __h;
    }

    public BuildSimpleIce
    clone()
    {
        BuildSimpleIce c = null;
        try
        {
            c = (BuildSimpleIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(buildId);
        __os.writeString(name);
        __os.writeString(sortNo);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        buildId = __is.readString();
        name = __is.readString();
        sortNo = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, BuildSimpleIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public BuildSimpleIce
    __read(IceInternal.BasicStream __is, BuildSimpleIce __v)
    {
        if(__v == null)
        {
             __v = new BuildSimpleIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final BuildSimpleIce __nullMarshalValue = new BuildSimpleIce();

    public static final long serialVersionUID = 989424197L;
}
