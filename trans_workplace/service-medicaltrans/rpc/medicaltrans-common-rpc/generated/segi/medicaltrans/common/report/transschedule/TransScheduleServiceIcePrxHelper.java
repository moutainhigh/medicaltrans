// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_trans_schedule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.common.report.transschedule;

/**
 * Provides type-specific helper functions.
 **/
public final class TransScheduleServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements TransScheduleServiceIcePrx
{
    private static final String __getTransScheduleMap_name = "getTransScheduleMap";

    public TransScheduleGroupOrganMapIce getTransScheduleMap()
    {
        return getTransScheduleMap(null, false);
    }

    public TransScheduleGroupOrganMapIce getTransScheduleMap(java.util.Map<String, String> __ctx)
    {
        return getTransScheduleMap(__ctx, true);
    }

    private TransScheduleGroupOrganMapIce getTransScheduleMap(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getTransScheduleMap_name);
        return end_getTransScheduleMap(begin_getTransScheduleMap(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getTransScheduleMap()
    {
        return begin_getTransScheduleMap(null, false, false, null);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx)
    {
        return begin_getTransScheduleMap(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(Ice.Callback __cb)
    {
        return begin_getTransScheduleMap(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTransScheduleMap(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(Callback_TransScheduleServiceIce_getTransScheduleMap __cb)
    {
        return begin_getTransScheduleMap(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx, Callback_TransScheduleServiceIce_getTransScheduleMap __cb)
    {
        return begin_getTransScheduleMap(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(IceInternal.Functional_GenericCallback1<TransScheduleGroupOrganMapIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTransScheduleMap(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(IceInternal.Functional_GenericCallback1<TransScheduleGroupOrganMapIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransScheduleMap(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<TransScheduleGroupOrganMapIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTransScheduleMap(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<TransScheduleGroupOrganMapIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransScheduleMap(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<TransScheduleGroupOrganMapIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransScheduleMap(__ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.report.transschedule.TransScheduleGroupOrganMapIce>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     TransScheduleServiceIcePrxHelper.__getTransScheduleMap_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_getTransScheduleMap(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTransScheduleMap_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getTransScheduleMap_name, __cb);
        try
        {
            __result.prepare(__getTransScheduleMap_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransScheduleGroupOrganMapIce end_getTransScheduleMap(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getTransScheduleMap_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransScheduleGroupOrganMapIce __ret = null;
            __ret = TransScheduleGroupOrganMapIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getTransScheduleMap_completed(Ice.TwowayCallbackArg1<TransScheduleGroupOrganMapIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.report.transschedule.TransScheduleServiceIcePrx __proxy = (segi.medicaltrans.common.report.transschedule.TransScheduleServiceIcePrx)__result.getProxy();
        TransScheduleGroupOrganMapIce __ret = null;
        try
        {
            __ret = __proxy.end_getTransScheduleMap(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryTransSchedule_name = "queryTransSchedule";

    public TransScheduleByOrganIdIce queryTransSchedule(int organId)
    {
        return queryTransSchedule(organId, null, false);
    }

    public TransScheduleByOrganIdIce queryTransSchedule(int organId, java.util.Map<String, String> __ctx)
    {
        return queryTransSchedule(organId, __ctx, true);
    }

    private TransScheduleByOrganIdIce queryTransSchedule(int organId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTransSchedule_name);
        return end_queryTransSchedule(begin_queryTransSchedule(organId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId)
    {
        return begin_queryTransSchedule(organId, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, java.util.Map<String, String> __ctx)
    {
        return begin_queryTransSchedule(organId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, Ice.Callback __cb)
    {
        return begin_queryTransSchedule(organId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTransSchedule(organId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, Callback_TransScheduleServiceIce_queryTransSchedule __cb)
    {
        return begin_queryTransSchedule(organId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, java.util.Map<String, String> __ctx, Callback_TransScheduleServiceIce_queryTransSchedule __cb)
    {
        return begin_queryTransSchedule(organId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, 
                                                    IceInternal.Functional_GenericCallback1<TransScheduleByOrganIdIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTransSchedule(organId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, 
                                                    IceInternal.Functional_GenericCallback1<TransScheduleByOrganIdIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransSchedule(organId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<TransScheduleByOrganIdIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTransSchedule(organId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTransSchedule(int organId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<TransScheduleByOrganIdIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransSchedule(organId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTransSchedule(int organId, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<TransScheduleByOrganIdIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransSchedule(organId, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.report.transschedule.TransScheduleByOrganIdIce>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    TransScheduleServiceIcePrxHelper.__queryTransSchedule_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_queryTransSchedule(int organId, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTransSchedule_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTransSchedule_name, __cb);
        try
        {
            __result.prepare(__queryTransSchedule_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(organId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransScheduleByOrganIdIce end_queryTransSchedule(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTransSchedule_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransScheduleByOrganIdIce __ret = null;
            __ret = TransScheduleByOrganIdIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTransSchedule_completed(Ice.TwowayCallbackArg1<TransScheduleByOrganIdIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.report.transschedule.TransScheduleServiceIcePrx __proxy = (segi.medicaltrans.common.report.transschedule.TransScheduleServiceIcePrx)__result.getProxy();
        TransScheduleByOrganIdIce __ret = null;
        try
        {
            __ret = __proxy.end_queryTransSchedule(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryTransSchedulePaginator_name = "queryTransSchedulePaginator";

    public TransSchedulePaginatorIce queryTransSchedulePaginator(TransScheduleIceParams params)
    {
        return queryTransSchedulePaginator(params, null, false);
    }

    public TransSchedulePaginatorIce queryTransSchedulePaginator(TransScheduleIceParams params, java.util.Map<String, String> __ctx)
    {
        return queryTransSchedulePaginator(params, __ctx, true);
    }

    private TransSchedulePaginatorIce queryTransSchedulePaginator(TransScheduleIceParams params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTransSchedulePaginator_name);
        return end_queryTransSchedulePaginator(begin_queryTransSchedulePaginator(params, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params)
    {
        return begin_queryTransSchedulePaginator(params, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, java.util.Map<String, String> __ctx)
    {
        return begin_queryTransSchedulePaginator(params, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, Ice.Callback __cb)
    {
        return begin_queryTransSchedulePaginator(params, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTransSchedulePaginator(params, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, Callback_TransScheduleServiceIce_queryTransSchedulePaginator __cb)
    {
        return begin_queryTransSchedulePaginator(params, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, java.util.Map<String, String> __ctx, Callback_TransScheduleServiceIce_queryTransSchedulePaginator __cb)
    {
        return begin_queryTransSchedulePaginator(params, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, 
                                                             IceInternal.Functional_GenericCallback1<TransSchedulePaginatorIce> __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTransSchedulePaginator(params, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, 
                                                             IceInternal.Functional_GenericCallback1<TransSchedulePaginatorIce> __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransSchedulePaginator(params, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, 
                                                             java.util.Map<String, String> __ctx, 
                                                             IceInternal.Functional_GenericCallback1<TransSchedulePaginatorIce> __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTransSchedulePaginator(params, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, 
                                                             java.util.Map<String, String> __ctx, 
                                                             IceInternal.Functional_GenericCallback1<TransSchedulePaginatorIce> __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransSchedulePaginator(params, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, 
                                                              java.util.Map<String, String> __ctx, 
                                                              boolean __explicitCtx, 
                                                              boolean __synchronous, 
                                                              IceInternal.Functional_GenericCallback1<TransSchedulePaginatorIce> __responseCb, 
                                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTransSchedulePaginator(params, __ctx, __explicitCtx, __synchronous, 
                                                 new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.report.transschedule.TransSchedulePaginatorIce>(__responseCb, __exceptionCb, __sentCb)
                                                     {
                                                         public final void __completed(Ice.AsyncResult __result)
                                                         {
                                                             TransScheduleServiceIcePrxHelper.__queryTransSchedulePaginator_completed(this, __result);
                                                         }
                                                     });
    }

    private Ice.AsyncResult begin_queryTransSchedulePaginator(TransScheduleIceParams params, 
                                                              java.util.Map<String, String> __ctx, 
                                                              boolean __explicitCtx, 
                                                              boolean __synchronous, 
                                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTransSchedulePaginator_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTransSchedulePaginator_name, __cb);
        try
        {
            __result.prepare(__queryTransSchedulePaginator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TransScheduleIceParams.__write(__os, params);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransSchedulePaginatorIce end_queryTransSchedulePaginator(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTransSchedulePaginator_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransSchedulePaginatorIce __ret = null;
            __ret = TransSchedulePaginatorIce.__read(__is, __ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTransSchedulePaginator_completed(Ice.TwowayCallbackArg1<TransSchedulePaginatorIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.report.transschedule.TransScheduleServiceIcePrx __proxy = (segi.medicaltrans.common.report.transschedule.TransScheduleServiceIcePrx)__result.getProxy();
        TransSchedulePaginatorIce __ret = null;
        try
        {
            __ret = __proxy.end_queryTransSchedulePaginator(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransScheduleServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), TransScheduleServiceIcePrx.class, TransScheduleServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransScheduleServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), TransScheduleServiceIcePrx.class, TransScheduleServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransScheduleServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), TransScheduleServiceIcePrx.class, TransScheduleServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TransScheduleServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), TransScheduleServiceIcePrx.class, TransScheduleServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static TransScheduleServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, TransScheduleServiceIcePrx.class, TransScheduleServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static TransScheduleServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, TransScheduleServiceIcePrx.class, TransScheduleServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::common::report::transschedule::TransScheduleServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, TransScheduleServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static TransScheduleServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TransScheduleServiceIcePrxHelper result = new TransScheduleServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
