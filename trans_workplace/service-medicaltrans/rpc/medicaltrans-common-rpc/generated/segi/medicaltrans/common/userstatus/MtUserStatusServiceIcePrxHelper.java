// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_user_status.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.common.userstatus;

/**
 * Provides type-specific helper functions.
 **/
public final class MtUserStatusServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements MtUserStatusServiceIcePrx
{
    private static final String __getLotStatusByUser_name = "getLotStatusByUser";

    public UserLotStatusDetailRspIce getLotStatusByUser(UserLotStatusIce userLotStatusIce)
    {
        return getLotStatusByUser(userLotStatusIce, null, false);
    }

    public UserLotStatusDetailRspIce getLotStatusByUser(UserLotStatusIce userLotStatusIce, java.util.Map<String, String> __ctx)
    {
        return getLotStatusByUser(userLotStatusIce, __ctx, true);
    }

    private UserLotStatusDetailRspIce getLotStatusByUser(UserLotStatusIce userLotStatusIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLotStatusByUser_name);
        return end_getLotStatusByUser(begin_getLotStatusByUser(userLotStatusIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce)
    {
        return begin_getLotStatusByUser(userLotStatusIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, java.util.Map<String, String> __ctx)
    {
        return begin_getLotStatusByUser(userLotStatusIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, Ice.Callback __cb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, Callback_MtUserStatusServiceIce_getLotStatusByUser __cb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, java.util.Map<String, String> __ctx, Callback_MtUserStatusServiceIce_getLotStatusByUser __cb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, 
                                                    IceInternal.Functional_GenericCallback1<UserLotStatusDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, 
                                                    IceInternal.Functional_GenericCallback1<UserLotStatusDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<UserLotStatusDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<UserLotStatusDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<UserLotStatusDetailRspIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLotStatusByUser(userLotStatusIce, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.userstatus.UserLotStatusDetailRspIce>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    MtUserStatusServiceIcePrxHelper.__getLotStatusByUser_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_getLotStatusByUser(UserLotStatusIce userLotStatusIce, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLotStatusByUser_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLotStatusByUser_name, __cb);
        try
        {
            __result.prepare(__getLotStatusByUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserLotStatusIce.__write(__os, userLotStatusIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserLotStatusDetailRspIce end_getLotStatusByUser(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLotStatusByUser_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserLotStatusDetailRspIce __ret = null;
            __ret = UserLotStatusDetailRspIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLotStatusByUser_completed(Ice.TwowayCallbackArg1<UserLotStatusDetailRspIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.userstatus.MtUserStatusServiceIcePrx __proxy = (segi.medicaltrans.common.userstatus.MtUserStatusServiceIcePrx)__result.getProxy();
        UserLotStatusDetailRspIce __ret = null;
        try
        {
            __ret = __proxy.end_getLotStatusByUser(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getStatusByUser_name = "getStatusByUser";

    public UserStatusDetailRspIce getStatusByUser(UserStatusIce userStatusIce)
    {
        return getStatusByUser(userStatusIce, null, false);
    }

    public UserStatusDetailRspIce getStatusByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx)
    {
        return getStatusByUser(userStatusIce, __ctx, true);
    }

    private UserStatusDetailRspIce getStatusByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getStatusByUser_name);
        return end_getStatusByUser(begin_getStatusByUser(userStatusIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce)
    {
        return begin_getStatusByUser(userStatusIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx)
    {
        return begin_getStatusByUser(userStatusIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, Ice.Callback __cb)
    {
        return begin_getStatusByUser(userStatusIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatusByUser(userStatusIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, Callback_MtUserStatusServiceIce_getStatusByUser __cb)
    {
        return begin_getStatusByUser(userStatusIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx, Callback_MtUserStatusServiceIce_getStatusByUser __cb)
    {
        return begin_getStatusByUser(userStatusIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, 
                                                 IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStatusByUser(userStatusIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, 
                                                 IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStatusByUser(userStatusIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStatusByUser(userStatusIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStatusByUser(userStatusIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStatusByUser(userStatusIce, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.userstatus.UserStatusDetailRspIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 MtUserStatusServiceIcePrxHelper.__getStatusByUser_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getStatusByUser(UserStatusIce userStatusIce, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatusByUser_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getStatusByUser_name, __cb);
        try
        {
            __result.prepare(__getStatusByUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserStatusIce.__write(__os, userStatusIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserStatusDetailRspIce end_getStatusByUser(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getStatusByUser_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserStatusDetailRspIce __ret = null;
            __ret = UserStatusDetailRspIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getStatusByUser_completed(Ice.TwowayCallbackArg1<UserStatusDetailRspIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.userstatus.MtUserStatusServiceIcePrx __proxy = (segi.medicaltrans.common.userstatus.MtUserStatusServiceIcePrx)__result.getProxy();
        UserStatusDetailRspIce __ret = null;
        try
        {
            __ret = __proxy.end_getStatusByUser(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateStausByUser_name = "updateStausByUser";

    public UserStatusDetailRspIce updateStausByUser(UserStatusIce userStatusIce)
    {
        return updateStausByUser(userStatusIce, null, false);
    }

    public UserStatusDetailRspIce updateStausByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx)
    {
        return updateStausByUser(userStatusIce, __ctx, true);
    }

    private UserStatusDetailRspIce updateStausByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateStausByUser_name);
        return end_updateStausByUser(begin_updateStausByUser(userStatusIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce)
    {
        return begin_updateStausByUser(userStatusIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx)
    {
        return begin_updateStausByUser(userStatusIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, Ice.Callback __cb)
    {
        return begin_updateStausByUser(userStatusIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateStausByUser(userStatusIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, Callback_MtUserStatusServiceIce_updateStausByUser __cb)
    {
        return begin_updateStausByUser(userStatusIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, java.util.Map<String, String> __ctx, Callback_MtUserStatusServiceIce_updateStausByUser __cb)
    {
        return begin_updateStausByUser(userStatusIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, 
                                                   IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateStausByUser(userStatusIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, 
                                                   IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateStausByUser(userStatusIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateStausByUser(userStatusIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateStausByUser(userStatusIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<UserStatusDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateStausByUser(userStatusIce, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.userstatus.UserStatusDetailRspIce>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   MtUserStatusServiceIcePrxHelper.__updateStausByUser_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_updateStausByUser(UserStatusIce userStatusIce, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateStausByUser_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateStausByUser_name, __cb);
        try
        {
            __result.prepare(__updateStausByUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            UserStatusIce.__write(__os, userStatusIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserStatusDetailRspIce end_updateStausByUser(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateStausByUser_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserStatusDetailRspIce __ret = null;
            __ret = UserStatusDetailRspIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateStausByUser_completed(Ice.TwowayCallbackArg1<UserStatusDetailRspIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.userstatus.MtUserStatusServiceIcePrx __proxy = (segi.medicaltrans.common.userstatus.MtUserStatusServiceIcePrx)__result.getProxy();
        UserStatusDetailRspIce __ret = null;
        try
        {
            __ret = __proxy.end_updateStausByUser(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtUserStatusServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MtUserStatusServiceIcePrx.class, MtUserStatusServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtUserStatusServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MtUserStatusServiceIcePrx.class, MtUserStatusServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtUserStatusServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MtUserStatusServiceIcePrx.class, MtUserStatusServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtUserStatusServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MtUserStatusServiceIcePrx.class, MtUserStatusServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MtUserStatusServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MtUserStatusServiceIcePrx.class, MtUserStatusServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MtUserStatusServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MtUserStatusServiceIcePrx.class, MtUserStatusServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::common::userstatus::MtUserStatusServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MtUserStatusServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MtUserStatusServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MtUserStatusServiceIcePrxHelper result = new MtUserStatusServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
