// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_loop_common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.common.taskloop;

/**
 * Provides type-specific helper functions.
 **/
public final class MtTaskLoopCommonServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements MtTaskLoopCommonServiceIcePrx
{
    private static final String __getMtTaskLoopListByMonth_name = "getMtTaskLoopListByMonth";

    public MtTaskLoopIceListReturn getMtTaskLoopListByMonth(int organId)
    {
        return getMtTaskLoopListByMonth(organId, null, false);
    }

    public MtTaskLoopIceListReturn getMtTaskLoopListByMonth(int organId, java.util.Map<String, String> __ctx)
    {
        return getMtTaskLoopListByMonth(organId, __ctx, true);
    }

    private MtTaskLoopIceListReturn getMtTaskLoopListByMonth(int organId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getMtTaskLoopListByMonth_name);
        return end_getMtTaskLoopListByMonth(begin_getMtTaskLoopListByMonth(organId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId)
    {
        return begin_getMtTaskLoopListByMonth(organId, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, java.util.Map<String, String> __ctx)
    {
        return begin_getMtTaskLoopListByMonth(organId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, Ice.Callback __cb)
    {
        return begin_getMtTaskLoopListByMonth(organId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMtTaskLoopListByMonth(organId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, Callback_MtTaskLoopCommonServiceIce_getMtTaskLoopListByMonth __cb)
    {
        return begin_getMtTaskLoopListByMonth(organId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, java.util.Map<String, String> __ctx, Callback_MtTaskLoopCommonServiceIce_getMtTaskLoopListByMonth __cb)
    {
        return begin_getMtTaskLoopListByMonth(organId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, 
                                                          IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMtTaskLoopListByMonth(organId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, 
                                                          IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMtTaskLoopListByMonth(organId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, 
                                                          java.util.Map<String, String> __ctx, 
                                                          IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMtTaskLoopListByMonth(organId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, 
                                                          java.util.Map<String, String> __ctx, 
                                                          IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMtTaskLoopListByMonth(organId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, 
                                                           java.util.Map<String, String> __ctx, 
                                                           boolean __explicitCtx, 
                                                           boolean __synchronous, 
                                                           IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMtTaskLoopListByMonth(organId, __ctx, __explicitCtx, __synchronous, 
                                              new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.taskloop.MtTaskLoopIceListReturn>(__responseCb, __exceptionCb, __sentCb)
                                                  {
                                                      public final void __completed(Ice.AsyncResult __result)
                                                      {
                                                          MtTaskLoopCommonServiceIcePrxHelper.__getMtTaskLoopListByMonth_completed(this, __result);
                                                      }
                                                  });
    }

    private Ice.AsyncResult begin_getMtTaskLoopListByMonth(int organId, 
                                                           java.util.Map<String, String> __ctx, 
                                                           boolean __explicitCtx, 
                                                           boolean __synchronous, 
                                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMtTaskLoopListByMonth_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMtTaskLoopListByMonth_name, __cb);
        try
        {
            __result.prepare(__getMtTaskLoopListByMonth_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(organId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public MtTaskLoopIceListReturn end_getMtTaskLoopListByMonth(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMtTaskLoopListByMonth_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            MtTaskLoopIceListReturn __ret = null;
            __ret = MtTaskLoopIceListReturn.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMtTaskLoopListByMonth_completed(Ice.TwowayCallbackArg1<MtTaskLoopIceListReturn> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx __proxy = (segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx)__result.getProxy();
        MtTaskLoopIceListReturn __ret = null;
        try
        {
            __ret = __proxy.end_getMtTaskLoopListByMonth(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getMtTaskLoopListByWeek_name = "getMtTaskLoopListByWeek";

    public MtTaskLoopIceListReturn getMtTaskLoopListByWeek(int organId)
    {
        return getMtTaskLoopListByWeek(organId, null, false);
    }

    public MtTaskLoopIceListReturn getMtTaskLoopListByWeek(int organId, java.util.Map<String, String> __ctx)
    {
        return getMtTaskLoopListByWeek(organId, __ctx, true);
    }

    private MtTaskLoopIceListReturn getMtTaskLoopListByWeek(int organId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getMtTaskLoopListByWeek_name);
        return end_getMtTaskLoopListByWeek(begin_getMtTaskLoopListByWeek(organId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId)
    {
        return begin_getMtTaskLoopListByWeek(organId, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, java.util.Map<String, String> __ctx)
    {
        return begin_getMtTaskLoopListByWeek(organId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, Ice.Callback __cb)
    {
        return begin_getMtTaskLoopListByWeek(organId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMtTaskLoopListByWeek(organId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, Callback_MtTaskLoopCommonServiceIce_getMtTaskLoopListByWeek __cb)
    {
        return begin_getMtTaskLoopListByWeek(organId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, java.util.Map<String, String> __ctx, Callback_MtTaskLoopCommonServiceIce_getMtTaskLoopListByWeek __cb)
    {
        return begin_getMtTaskLoopListByWeek(organId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, 
                                                         IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMtTaskLoopListByWeek(organId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, 
                                                         IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMtTaskLoopListByWeek(organId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMtTaskLoopListByWeek(organId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMtTaskLoopListByWeek(organId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.Functional_GenericCallback1<MtTaskLoopIceListReturn> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMtTaskLoopListByWeek(organId, __ctx, __explicitCtx, __synchronous, 
                                             new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.taskloop.MtTaskLoopIceListReturn>(__responseCb, __exceptionCb, __sentCb)
                                                 {
                                                     public final void __completed(Ice.AsyncResult __result)
                                                     {
                                                         MtTaskLoopCommonServiceIcePrxHelper.__getMtTaskLoopListByWeek_completed(this, __result);
                                                     }
                                                 });
    }

    private Ice.AsyncResult begin_getMtTaskLoopListByWeek(int organId, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMtTaskLoopListByWeek_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMtTaskLoopListByWeek_name, __cb);
        try
        {
            __result.prepare(__getMtTaskLoopListByWeek_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(organId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public MtTaskLoopIceListReturn end_getMtTaskLoopListByWeek(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMtTaskLoopListByWeek_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            MtTaskLoopIceListReturn __ret = null;
            __ret = MtTaskLoopIceListReturn.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMtTaskLoopListByWeek_completed(Ice.TwowayCallbackArg1<MtTaskLoopIceListReturn> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx __proxy = (segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx)__result.getProxy();
        MtTaskLoopIceListReturn __ret = null;
        try
        {
            __ret = __proxy.end_getMtTaskLoopListByWeek(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __selectLocationIdList_name = "selectLocationIdList";

    public ReturnInteger selectLocationIdList(String taskLoopId)
    {
        return selectLocationIdList(taskLoopId, null, false);
    }

    public ReturnInteger selectLocationIdList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return selectLocationIdList(taskLoopId, __ctx, true);
    }

    private ReturnInteger selectLocationIdList(String taskLoopId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__selectLocationIdList_name);
        return end_selectLocationIdList(begin_selectLocationIdList(taskLoopId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId)
    {
        return begin_selectLocationIdList(taskLoopId, null, false, false, null);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return begin_selectLocationIdList(taskLoopId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, Ice.Callback __cb)
    {
        return begin_selectLocationIdList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectLocationIdList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, Callback_MtTaskLoopCommonServiceIce_selectLocationIdList __cb)
    {
        return begin_selectLocationIdList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, java.util.Map<String, String> __ctx, Callback_MtTaskLoopCommonServiceIce_selectLocationIdList __cb)
    {
        return begin_selectLocationIdList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, 
                                                      IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_selectLocationIdList(taskLoopId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, 
                                                      IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_selectLocationIdList(taskLoopId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_selectLocationIdList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_selectLocationIdList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_selectLocationIdList(taskLoopId, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.taskloop.ReturnInteger>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      MtTaskLoopCommonServiceIcePrxHelper.__selectLocationIdList_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_selectLocationIdList(String taskLoopId, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectLocationIdList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__selectLocationIdList_name, __cb);
        try
        {
            __result.prepare(__selectLocationIdList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskLoopId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public ReturnInteger end_selectLocationIdList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __selectLocationIdList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            ReturnInteger __ret = null;
            __ret = ReturnInteger.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __selectLocationIdList_completed(Ice.TwowayCallbackArg1<ReturnInteger> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx __proxy = (segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx)__result.getProxy();
        ReturnInteger __ret = null;
        try
        {
            __ret = __proxy.end_selectLocationIdList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __selectUserIdList_name = "selectUserIdList";

    public ReturnInteger selectUserIdList(String taskLoopId)
    {
        return selectUserIdList(taskLoopId, null, false);
    }

    public ReturnInteger selectUserIdList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return selectUserIdList(taskLoopId, __ctx, true);
    }

    private ReturnInteger selectUserIdList(String taskLoopId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__selectUserIdList_name);
        return end_selectUserIdList(begin_selectUserIdList(taskLoopId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId)
    {
        return begin_selectUserIdList(taskLoopId, null, false, false, null);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, java.util.Map<String, String> __ctx)
    {
        return begin_selectUserIdList(taskLoopId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, Ice.Callback __cb)
    {
        return begin_selectUserIdList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectUserIdList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, Callback_MtTaskLoopCommonServiceIce_selectUserIdList __cb)
    {
        return begin_selectUserIdList(taskLoopId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, java.util.Map<String, String> __ctx, Callback_MtTaskLoopCommonServiceIce_selectUserIdList __cb)
    {
        return begin_selectUserIdList(taskLoopId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, 
                                                  IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_selectUserIdList(taskLoopId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, 
                                                  IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_selectUserIdList(taskLoopId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_selectUserIdList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_selectUserIdList(String taskLoopId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_selectUserIdList(taskLoopId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_selectUserIdList(String taskLoopId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<ReturnInteger> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_selectUserIdList(taskLoopId, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.common.taskloop.ReturnInteger>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  MtTaskLoopCommonServiceIcePrxHelper.__selectUserIdList_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_selectUserIdList(String taskLoopId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectUserIdList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__selectUserIdList_name, __cb);
        try
        {
            __result.prepare(__selectUserIdList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskLoopId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public ReturnInteger end_selectUserIdList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __selectUserIdList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            ReturnInteger __ret = null;
            __ret = ReturnInteger.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __selectUserIdList_completed(Ice.TwowayCallbackArg1<ReturnInteger> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx __proxy = (segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx)__result.getProxy();
        ReturnInteger __ret = null;
        try
        {
            __ret = __proxy.end_selectUserIdList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateTaskLoopStatus_name = "updateTaskLoopStatus";

    public resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam)
    {
        return updateTaskLoopStatus(taskLoopStatusParam, null, false);
    }

    public resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx)
    {
        return updateTaskLoopStatus(taskLoopStatusParam, __ctx, true);
    }

    private resp.RpcRespIce updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateTaskLoopStatus_name);
        return end_updateTaskLoopStatus(begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, Ice.Callback __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, Callback_MtTaskLoopCommonServiceIce_updateTaskLoopStatus __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, java.util.Map<String, String> __ctx, Callback_MtTaskLoopCommonServiceIce_updateTaskLoopStatus __cb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTaskLoopStatus(taskLoopStatusParam, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      MtTaskLoopCommonServiceIcePrxHelper.__updateTaskLoopStatus_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_updateTaskLoopStatus(TaskLoopStatusParam taskLoopStatusParam, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTaskLoopStatus_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateTaskLoopStatus_name, __cb);
        try
        {
            __result.prepare(__updateTaskLoopStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TaskLoopStatusParam.__write(__os, taskLoopStatusParam);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateTaskLoopStatus(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateTaskLoopStatus_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateTaskLoopStatus_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx __proxy = (segi.medicaltrans.common.taskloop.MtTaskLoopCommonServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateTaskLoopStatus(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskLoopCommonServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MtTaskLoopCommonServiceIcePrx.class, MtTaskLoopCommonServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskLoopCommonServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MtTaskLoopCommonServiceIcePrx.class, MtTaskLoopCommonServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskLoopCommonServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MtTaskLoopCommonServiceIcePrx.class, MtTaskLoopCommonServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskLoopCommonServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MtTaskLoopCommonServiceIcePrx.class, MtTaskLoopCommonServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MtTaskLoopCommonServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MtTaskLoopCommonServiceIcePrx.class, MtTaskLoopCommonServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MtTaskLoopCommonServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MtTaskLoopCommonServiceIcePrx.class, MtTaskLoopCommonServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::common::taskloop::MtTaskLoopCommonServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MtTaskLoopCommonServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MtTaskLoopCommonServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MtTaskLoopCommonServiceIcePrxHelper result = new MtTaskLoopCommonServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
