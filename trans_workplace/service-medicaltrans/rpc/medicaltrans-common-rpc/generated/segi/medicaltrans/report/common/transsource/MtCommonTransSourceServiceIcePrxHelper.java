// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_transsource_common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.report.common.transsource;

/**
 * Provides type-specific helper functions.
 **/
public final class MtCommonTransSourceServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements MtCommonTransSourceServiceIcePrx
{
    private static final String __deleteTransSourceById_name = "deleteTransSourceById";

    public resp.RpcRespIce deleteTransSourceById(int id)
    {
        return deleteTransSourceById(id, null, false);
    }

    public resp.RpcRespIce deleteTransSourceById(int id, java.util.Map<String, String> __ctx)
    {
        return deleteTransSourceById(id, __ctx, true);
    }

    private resp.RpcRespIce deleteTransSourceById(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__deleteTransSourceById_name);
        return end_deleteTransSourceById(begin_deleteTransSourceById(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id)
    {
        return begin_deleteTransSourceById(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, java.util.Map<String, String> __ctx)
    {
        return begin_deleteTransSourceById(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, Ice.Callback __cb)
    {
        return begin_deleteTransSourceById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteTransSourceById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, Callback_MtCommonTransSourceServiceIce_deleteTransSourceById __cb)
    {
        return begin_deleteTransSourceById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, java.util.Map<String, String> __ctx, Callback_MtCommonTransSourceServiceIce_deleteTransSourceById __cb)
    {
        return begin_deleteTransSourceById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteTransSourceById(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteTransSourceById(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteTransSourceById(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteTransSourceById(int id, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteTransSourceById(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deleteTransSourceById(int id, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteTransSourceById(id, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       MtCommonTransSourceServiceIcePrxHelper.__deleteTransSourceById_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_deleteTransSourceById(int id, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteTransSourceById_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deleteTransSourceById_name, __cb);
        try
        {
            __result.prepare(__deleteTransSourceById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_deleteTransSourceById(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __deleteTransSourceById_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __deleteTransSourceById_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx __proxy = (segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_deleteTransSourceById(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getTransSourceById_name = "getTransSourceById";

    public TransSourceInfoReturnIce getTransSourceById(int id)
    {
        return getTransSourceById(id, null, false);
    }

    public TransSourceInfoReturnIce getTransSourceById(int id, java.util.Map<String, String> __ctx)
    {
        return getTransSourceById(id, __ctx, true);
    }

    private TransSourceInfoReturnIce getTransSourceById(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getTransSourceById_name);
        return end_getTransSourceById(begin_getTransSourceById(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getTransSourceById(int id)
    {
        return begin_getTransSourceById(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getTransSourceById(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, Ice.Callback __cb)
    {
        return begin_getTransSourceById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTransSourceById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, Callback_MtCommonTransSourceServiceIce_getTransSourceById __cb)
    {
        return begin_getTransSourceById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, java.util.Map<String, String> __ctx, Callback_MtCommonTransSourceServiceIce_getTransSourceById __cb)
    {
        return begin_getTransSourceById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, 
                                                    IceInternal.Functional_GenericCallback1<TransSourceInfoReturnIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTransSourceById(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, 
                                                    IceInternal.Functional_GenericCallback1<TransSourceInfoReturnIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransSourceById(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<TransSourceInfoReturnIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTransSourceById(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTransSourceById(int id, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<TransSourceInfoReturnIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransSourceById(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getTransSourceById(int id, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<TransSourceInfoReturnIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTransSourceById(id, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.report.common.transsource.TransSourceInfoReturnIce>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    MtCommonTransSourceServiceIcePrxHelper.__getTransSourceById_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_getTransSourceById(int id, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTransSourceById_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getTransSourceById_name, __cb);
        try
        {
            __result.prepare(__getTransSourceById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransSourceInfoReturnIce end_getTransSourceById(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getTransSourceById_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransSourceInfoReturnIce __ret = null;
            __ret = TransSourceInfoReturnIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getTransSourceById_completed(Ice.TwowayCallbackArg1<TransSourceInfoReturnIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx __proxy = (segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx)__result.getProxy();
        TransSourceInfoReturnIce __ret = null;
        try
        {
            __ret = __proxy.end_getTransSourceById(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveTransSource_name = "saveTransSource";

    public resp.RpcRespIce saveTransSource(TransSourceInfo transSourceInfo)
    {
        return saveTransSource(transSourceInfo, null, false);
    }

    public resp.RpcRespIce saveTransSource(TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx)
    {
        return saveTransSource(transSourceInfo, __ctx, true);
    }

    private resp.RpcRespIce saveTransSource(TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveTransSource_name);
        return end_saveTransSource(begin_saveTransSource(transSourceInfo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo)
    {
        return begin_saveTransSource(transSourceInfo, null, false, false, null);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx)
    {
        return begin_saveTransSource(transSourceInfo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, Ice.Callback __cb)
    {
        return begin_saveTransSource(transSourceInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveTransSource(transSourceInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, Callback_MtCommonTransSourceServiceIce_saveTransSource __cb)
    {
        return begin_saveTransSource(transSourceInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx, Callback_MtCommonTransSourceServiceIce_saveTransSource __cb)
    {
        return begin_saveTransSource(transSourceInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTransSource(transSourceInfo, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTransSource(transSourceInfo, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTransSource(transSourceInfo, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTransSource(transSourceInfo, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTransSource(transSourceInfo, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 MtCommonTransSourceServiceIcePrxHelper.__saveTransSource_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_saveTransSource(TransSourceInfo transSourceInfo, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveTransSource_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveTransSource_name, __cb);
        try
        {
            __result.prepare(__saveTransSource_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TransSourceInfo.__write(__os, transSourceInfo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_saveTransSource(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveTransSource_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveTransSource_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx __proxy = (segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_saveTransSource(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateTransSourceById_name = "updateTransSourceById";

    public resp.RpcRespIce updateTransSourceById(int id, TransSourceInfo transSourceInfo)
    {
        return updateTransSourceById(id, transSourceInfo, null, false);
    }

    public resp.RpcRespIce updateTransSourceById(int id, TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx)
    {
        return updateTransSourceById(id, transSourceInfo, __ctx, true);
    }

    private resp.RpcRespIce updateTransSourceById(int id, TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateTransSourceById_name);
        return end_updateTransSourceById(begin_updateTransSourceById(id, transSourceInfo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, TransSourceInfo transSourceInfo)
    {
        return begin_updateTransSourceById(id, transSourceInfo, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx)
    {
        return begin_updateTransSourceById(id, transSourceInfo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, TransSourceInfo transSourceInfo, Ice.Callback __cb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, TransSourceInfo transSourceInfo, Callback_MtCommonTransSourceServiceIce_updateTransSourceById __cb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, TransSourceInfo transSourceInfo, java.util.Map<String, String> __ctx, Callback_MtCommonTransSourceServiceIce_updateTransSourceById __cb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, 
                                                       TransSourceInfo transSourceInfo, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, 
                                                       TransSourceInfo transSourceInfo, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, 
                                                       TransSourceInfo transSourceInfo, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTransSourceById(int id, 
                                                       TransSourceInfo transSourceInfo, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateTransSourceById(int id, 
                                                        TransSourceInfo transSourceInfo, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTransSourceById(id, transSourceInfo, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       MtCommonTransSourceServiceIcePrxHelper.__updateTransSourceById_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_updateTransSourceById(int id, 
                                                        TransSourceInfo transSourceInfo, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTransSourceById_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateTransSourceById_name, __cb);
        try
        {
            __result.prepare(__updateTransSourceById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            TransSourceInfo.__write(__os, transSourceInfo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateTransSourceById(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateTransSourceById_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateTransSourceById_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx __proxy = (segi.medicaltrans.report.common.transsource.MtCommonTransSourceServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateTransSourceById(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtCommonTransSourceServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MtCommonTransSourceServiceIcePrx.class, MtCommonTransSourceServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtCommonTransSourceServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MtCommonTransSourceServiceIcePrx.class, MtCommonTransSourceServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtCommonTransSourceServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MtCommonTransSourceServiceIcePrx.class, MtCommonTransSourceServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtCommonTransSourceServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MtCommonTransSourceServiceIcePrx.class, MtCommonTransSourceServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MtCommonTransSourceServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MtCommonTransSourceServiceIcePrx.class, MtCommonTransSourceServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MtCommonTransSourceServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MtCommonTransSourceServiceIcePrx.class, MtCommonTransSourceServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::report::common::transsource::MtCommonTransSourceServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MtCommonTransSourceServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MtCommonTransSourceServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MtCommonTransSourceServiceIcePrxHelper result = new MtCommonTransSourceServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
