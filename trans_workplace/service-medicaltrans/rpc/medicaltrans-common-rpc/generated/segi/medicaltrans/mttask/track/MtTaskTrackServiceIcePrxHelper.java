// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_task_track.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mttask.track;

/**
 * Provides type-specific helper functions.
 **/
public final class MtTaskTrackServiceIcePrxHelper extends Ice.ObjectPrxHelperBase implements MtTaskTrackServiceIcePrx
{
    private static final String __queryTaskTrackById_name = "queryTaskTrackById";

    public TrackDetailRspIce queryTaskTrackById(int id)
    {
        return queryTaskTrackById(id, null, false);
    }

    public TrackDetailRspIce queryTaskTrackById(int id, java.util.Map<String, String> __ctx)
    {
        return queryTaskTrackById(id, __ctx, true);
    }

    private TrackDetailRspIce queryTaskTrackById(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryTaskTrackById_name);
        return end_queryTaskTrackById(begin_queryTaskTrackById(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id)
    {
        return begin_queryTaskTrackById(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, java.util.Map<String, String> __ctx)
    {
        return begin_queryTaskTrackById(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, Ice.Callback __cb)
    {
        return begin_queryTaskTrackById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryTaskTrackById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, Callback_MtTaskTrackServiceIce_queryTaskTrackById __cb)
    {
        return begin_queryTaskTrackById(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, java.util.Map<String, String> __ctx, Callback_MtTaskTrackServiceIce_queryTaskTrackById __cb)
    {
        return begin_queryTaskTrackById(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, 
                                                    IceInternal.Functional_GenericCallback1<TrackDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTaskTrackById(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, 
                                                    IceInternal.Functional_GenericCallback1<TrackDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskTrackById(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<TrackDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryTaskTrackById(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryTaskTrackById(int id, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<TrackDetailRspIce> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskTrackById(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryTaskTrackById(int id, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<TrackDetailRspIce> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryTaskTrackById(id, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<segi.medicaltrans.mttask.track.TrackDetailRspIce>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    MtTaskTrackServiceIcePrxHelper.__queryTaskTrackById_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_queryTaskTrackById(int id, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryTaskTrackById_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryTaskTrackById_name, __cb);
        try
        {
            __result.prepare(__queryTaskTrackById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TrackDetailRspIce end_queryTaskTrackById(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryTaskTrackById_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TrackDetailRspIce __ret = null;
            __ret = TrackDetailRspIce.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryTaskTrackById_completed(Ice.TwowayCallbackArg1<TrackDetailRspIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx __proxy = (segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx)__result.getProxy();
        TrackDetailRspIce __ret = null;
        try
        {
            __ret = __proxy.end_queryTaskTrackById(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveTaskTrackMessage_name = "saveTaskTrackMessage";

    public resp.RpcRespIce saveTaskTrackMessage(int taskId, ItemIce itemIce)
    {
        return saveTaskTrackMessage(taskId, itemIce, null, false);
    }

    public resp.RpcRespIce saveTaskTrackMessage(int taskId, ItemIce itemIce, java.util.Map<String, String> __ctx)
    {
        return saveTaskTrackMessage(taskId, itemIce, __ctx, true);
    }

    private resp.RpcRespIce saveTaskTrackMessage(int taskId, ItemIce itemIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveTaskTrackMessage_name);
        return end_saveTaskTrackMessage(begin_saveTaskTrackMessage(taskId, itemIce, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, ItemIce itemIce)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, null, false, false, null);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, ItemIce itemIce, java.util.Map<String, String> __ctx)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, ItemIce itemIce, Ice.Callback __cb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, ItemIce itemIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, ItemIce itemIce, Callback_MtTaskTrackServiceIce_saveTaskTrackMessage __cb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, ItemIce itemIce, java.util.Map<String, String> __ctx, Callback_MtTaskTrackServiceIce_saveTaskTrackMessage __cb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, 
                                                      ItemIce itemIce, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, 
                                                      ItemIce itemIce, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, 
                                                      ItemIce itemIce, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, 
                                                      ItemIce itemIce, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, 
                                                       ItemIce itemIce, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTaskTrackMessage(taskId, itemIce, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      MtTaskTrackServiceIcePrxHelper.__saveTaskTrackMessage_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_saveTaskTrackMessage(int taskId, 
                                                       ItemIce itemIce, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveTaskTrackMessage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveTaskTrackMessage_name, __cb);
        try
        {
            __result.prepare(__saveTaskTrackMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(taskId);
            ItemIce.__write(__os, itemIce);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_saveTaskTrackMessage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveTaskTrackMessage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveTaskTrackMessage_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx __proxy = (segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_saveTaskTrackMessage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __saveTrackForCreateTask_name = "saveTrackForCreateTask";

    public resp.RpcRespIce saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList)
    {
        return saveTrackForCreateTask(taskId, organId, beginTime, itemList, null, false);
    }

    public resp.RpcRespIce saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, java.util.Map<String, String> __ctx)
    {
        return saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, true);
    }

    private resp.RpcRespIce saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__saveTrackForCreateTask_name);
        return end_saveTrackForCreateTask(begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, null, false, false, null);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, java.util.Map<String, String> __ctx)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, Ice.Callback __cb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, Callback_MtTaskTrackServiceIce_saveTrackForCreateTask __cb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, int organId, String beginTime, java.util.List<ItemIce> itemList, java.util.Map<String, String> __ctx, Callback_MtTaskTrackServiceIce_saveTrackForCreateTask __cb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        java.util.List<ItemIce> itemList, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        java.util.List<ItemIce> itemList, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        java.util.List<ItemIce> itemList, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        java.util.List<ItemIce> itemList, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, 
                                                         int organId, 
                                                         String beginTime, 
                                                         java.util.List<ItemIce> itemList, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_saveTrackForCreateTask(taskId, organId, beginTime, itemList, __ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        MtTaskTrackServiceIcePrxHelper.__saveTrackForCreateTask_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_saveTrackForCreateTask(String taskId, 
                                                         int organId, 
                                                         String beginTime, 
                                                         java.util.List<ItemIce> itemList, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveTrackForCreateTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__saveTrackForCreateTask_name, __cb);
        try
        {
            __result.prepare(__saveTrackForCreateTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskId);
            __os.writeInt(organId);
            __os.writeString(beginTime);
            ItemListHelper.write(__os, itemList);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_saveTrackForCreateTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __saveTrackForCreateTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __saveTrackForCreateTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx __proxy = (segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_saveTrackForCreateTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateTrackForEditTask_name = "updateTrackForEditTask";

    public resp.RpcRespIce updateTrackForEditTask(String taskId, int organId, String beginTime)
    {
        return updateTrackForEditTask(taskId, organId, beginTime, null, false);
    }

    public resp.RpcRespIce updateTrackForEditTask(String taskId, int organId, String beginTime, java.util.Map<String, String> __ctx)
    {
        return updateTrackForEditTask(taskId, organId, beginTime, __ctx, true);
    }

    private resp.RpcRespIce updateTrackForEditTask(String taskId, int organId, String beginTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateTrackForEditTask_name);
        return end_updateTrackForEditTask(begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, int organId, String beginTime)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, int organId, String beginTime, java.util.Map<String, String> __ctx)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, int organId, String beginTime, Ice.Callback __cb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, int organId, String beginTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, int organId, String beginTime, Callback_MtTaskTrackServiceIce_updateTrackForEditTask __cb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, int organId, String beginTime, java.util.Map<String, String> __ctx, Callback_MtTaskTrackServiceIce_updateTrackForEditTask __cb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateTrackForEditTask(String taskId, 
                                                        int organId, 
                                                        String beginTime, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateTrackForEditTask(String taskId, 
                                                         int organId, 
                                                         String beginTime, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<resp.RpcRespIce> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateTrackForEditTask(taskId, organId, beginTime, __ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<resp.RpcRespIce>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        MtTaskTrackServiceIcePrxHelper.__updateTrackForEditTask_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_updateTrackForEditTask(String taskId, 
                                                         int organId, 
                                                         String beginTime, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTrackForEditTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateTrackForEditTask_name, __cb);
        try
        {
            __result.prepare(__updateTrackForEditTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskId);
            __os.writeInt(organId);
            __os.writeString(beginTime);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public resp.RpcRespIce end_updateTrackForEditTask(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateTrackForEditTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            resp.RpcRespIceHolder __ret = new resp.RpcRespIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateTrackForEditTask_completed(Ice.TwowayCallbackArg1<resp.RpcRespIce> __cb, Ice.AsyncResult __result)
    {
        segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx __proxy = (segi.medicaltrans.mttask.track.MtTaskTrackServiceIcePrx)__result.getProxy();
        resp.RpcRespIce __ret = null;
        try
        {
            __ret = __proxy.end_updateTrackForEditTask(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskTrackServiceIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MtTaskTrackServiceIcePrx.class, MtTaskTrackServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskTrackServiceIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MtTaskTrackServiceIcePrx.class, MtTaskTrackServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskTrackServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MtTaskTrackServiceIcePrx.class, MtTaskTrackServiceIcePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static MtTaskTrackServiceIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MtTaskTrackServiceIcePrx.class, MtTaskTrackServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static MtTaskTrackServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MtTaskTrackServiceIcePrx.class, MtTaskTrackServiceIcePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static MtTaskTrackServiceIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MtTaskTrackServiceIcePrx.class, MtTaskTrackServiceIcePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mttask::track::MtTaskTrackServiceIce"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MtTaskTrackServiceIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MtTaskTrackServiceIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MtTaskTrackServiceIcePrxHelper result = new MtTaskTrackServiceIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
