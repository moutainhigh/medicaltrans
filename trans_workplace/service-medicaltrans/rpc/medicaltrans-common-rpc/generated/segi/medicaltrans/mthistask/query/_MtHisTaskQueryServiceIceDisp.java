// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `mt_his_task_query.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.medicaltrans.mthistask.query;

public abstract class _MtHisTaskQueryServiceIceDisp extends Ice.ObjectImpl implements MtHisTaskQueryServiceIce
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::segi::medicaltrans::mthistask::query::MtHisTaskQueryServiceIce"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final MtTaskPaginatorIceRsp getDeptTaskPage(DeptTaskPageIceParam deptTaskPageIceParam)
    {
        return getDeptTaskPage(deptTaskPageIceParam, null);
    }

    public final FixedTaskExeDetailReturnIce queryMtHisFixedTaskExeDetail(MtTaskDetailIceParam mtTaskDetailIceParam)
    {
        return queryMtHisFixedTaskExeDetail(mtTaskDetailIceParam, null);
    }

    public final FixedTaskHisExePageRsp queryMtHisFixedTaskExeInfoPage(MtTaskPageIceParam mtTaskPageIceParam)
    {
        return queryMtHisFixedTaskExeInfoPage(mtTaskPageIceParam, null);
    }

    public final MtTaskDetailRetIceRsp queryMtHisTaskDetail(MtTaskDetailIceParam mtTaskDetailIceParam)
    {
        return queryMtHisTaskDetail(mtTaskDetailIceParam, null);
    }

    public final MtTaskDetailRetIceRsp queryMtHisTaskFixedDetail(MtTaskDetailIceParam mtTaskDetailIceParam)
    {
        return queryMtHisTaskFixedDetail(mtTaskDetailIceParam, null);
    }

    public final MtTaskPaginatorIceRsp queryMtHisTaskPage(MtTaskPageIceParam mtTaskPageIceParam)
    {
        return queryMtHisTaskPage(mtTaskPageIceParam, null);
    }

    public final MtTaskPaginatorIceRsp queryMtHisTaskPageByUser(MtTaskPageIceParam mtTaskPageIceParam)
    {
        return queryMtHisTaskPageByUser(mtTaskPageIceParam, null);
    }

    public final MtTaskPaginatorIceRsp queryUserHisTaskDaylyPage(MtTaskPageIceParam mtTaskPageIceParam)
    {
        return queryUserHisTaskDaylyPage(mtTaskPageIceParam, null);
    }

    public static Ice.DispatchStatus ___queryMtHisTaskPage(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskPageIceParam mtTaskPageIceParam = null;
        mtTaskPageIceParam = MtTaskPageIceParam.__read(__is, mtTaskPageIceParam);
        __inS.endReadParams();
        MtTaskPaginatorIceRsp __ret = __obj.queryMtHisTaskPage(mtTaskPageIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskPaginatorIceRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryMtHisFixedTaskExeInfoPage(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskPageIceParam mtTaskPageIceParam = null;
        mtTaskPageIceParam = MtTaskPageIceParam.__read(__is, mtTaskPageIceParam);
        __inS.endReadParams();
        FixedTaskHisExePageRsp __ret = __obj.queryMtHisFixedTaskExeInfoPage(mtTaskPageIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FixedTaskHisExePageRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryMtHisTaskDetail(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskDetailIceParam mtTaskDetailIceParam = null;
        mtTaskDetailIceParam = MtTaskDetailIceParam.__read(__is, mtTaskDetailIceParam);
        __inS.endReadParams();
        MtTaskDetailRetIceRsp __ret = __obj.queryMtHisTaskDetail(mtTaskDetailIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskDetailRetIceRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryMtHisTaskFixedDetail(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskDetailIceParam mtTaskDetailIceParam = null;
        mtTaskDetailIceParam = MtTaskDetailIceParam.__read(__is, mtTaskDetailIceParam);
        __inS.endReadParams();
        MtTaskDetailRetIceRsp __ret = __obj.queryMtHisTaskFixedDetail(mtTaskDetailIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskDetailRetIceRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryMtHisFixedTaskExeDetail(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskDetailIceParam mtTaskDetailIceParam = null;
        mtTaskDetailIceParam = MtTaskDetailIceParam.__read(__is, mtTaskDetailIceParam);
        __inS.endReadParams();
        FixedTaskExeDetailReturnIce __ret = __obj.queryMtHisFixedTaskExeDetail(mtTaskDetailIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FixedTaskExeDetailReturnIce.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryMtHisTaskPageByUser(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskPageIceParam mtTaskPageIceParam = null;
        mtTaskPageIceParam = MtTaskPageIceParam.__read(__is, mtTaskPageIceParam);
        __inS.endReadParams();
        MtTaskPaginatorIceRsp __ret = __obj.queryMtHisTaskPageByUser(mtTaskPageIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskPaginatorIceRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDeptTaskPage(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        DeptTaskPageIceParam deptTaskPageIceParam = null;
        deptTaskPageIceParam = DeptTaskPageIceParam.__read(__is, deptTaskPageIceParam);
        __inS.endReadParams();
        MtTaskPaginatorIceRsp __ret = __obj.getDeptTaskPage(deptTaskPageIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskPaginatorIceRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryUserHisTaskDaylyPage(MtHisTaskQueryServiceIce __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MtTaskPageIceParam mtTaskPageIceParam = null;
        mtTaskPageIceParam = MtTaskPageIceParam.__read(__is, mtTaskPageIceParam);
        __inS.endReadParams();
        MtTaskPaginatorIceRsp __ret = __obj.queryUserHisTaskDaylyPage(mtTaskPageIceParam, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        MtTaskPaginatorIceRsp.__write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getDeptTaskPage",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryMtHisFixedTaskExeDetail",
        "queryMtHisFixedTaskExeInfoPage",
        "queryMtHisTaskDetail",
        "queryMtHisTaskFixedDetail",
        "queryMtHisTaskPage",
        "queryMtHisTaskPageByUser",
        "queryUserHisTaskDaylyPage"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getDeptTaskPage(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___queryMtHisFixedTaskExeDetail(this, in, __current);
            }
            case 6:
            {
                return ___queryMtHisFixedTaskExeInfoPage(this, in, __current);
            }
            case 7:
            {
                return ___queryMtHisTaskDetail(this, in, __current);
            }
            case 8:
            {
                return ___queryMtHisTaskFixedDetail(this, in, __current);
            }
            case 9:
            {
                return ___queryMtHisTaskPage(this, in, __current);
            }
            case 10:
            {
                return ___queryMtHisTaskPageByUser(this, in, __current);
            }
            case 11:
            {
                return ___queryUserHisTaskDaylyPage(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
