// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `pushjob.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package segi.whcommon.push;

public class MessageIce implements java.lang.Cloneable, java.io.Serializable
{
    public String msgTypeCode;

    public String
    getMsgTypeCode()
    {
        return msgTypeCode;
    }

    public void
    setMsgTypeCode(String _msgTypeCode)
    {
        msgTypeCode = _msgTypeCode;
    }

    public String businessKey;

    public String
    getBusinessKey()
    {
        return businessKey;
    }

    public void
    setBusinessKey(String _businessKey)
    {
        businessKey = _businessKey;
    }

    public String msgParams;

    public String
    getMsgParams()
    {
        return msgParams;
    }

    public void
    setMsgParams(String _msgParams)
    {
        msgParams = _msgParams;
    }

    public long msgTime;

    public long
    getMsgTime()
    {
        return msgTime;
    }

    public void
    setMsgTime(long _msgTime)
    {
        msgTime = _msgTime;
    }

    public MessageIce()
    {
        msgTypeCode = "";
        businessKey = "";
        msgParams = "";
    }

    public MessageIce(String msgTypeCode, String businessKey, String msgParams, long msgTime)
    {
        this.msgTypeCode = msgTypeCode;
        this.businessKey = businessKey;
        this.msgParams = msgParams;
        this.msgTime = msgTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MessageIce _r = null;
        if(rhs instanceof MessageIce)
        {
            _r = (MessageIce)rhs;
        }

        if(_r != null)
        {
            if(msgTypeCode != _r.msgTypeCode)
            {
                if(msgTypeCode == null || _r.msgTypeCode == null || !msgTypeCode.equals(_r.msgTypeCode))
                {
                    return false;
                }
            }
            if(businessKey != _r.businessKey)
            {
                if(businessKey == null || _r.businessKey == null || !businessKey.equals(_r.businessKey))
                {
                    return false;
                }
            }
            if(msgParams != _r.msgParams)
            {
                if(msgParams == null || _r.msgParams == null || !msgParams.equals(_r.msgParams))
                {
                    return false;
                }
            }
            if(msgTime != _r.msgTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::segi::whcommon::push::MessageIce");
        __h = IceInternal.HashUtil.hashAdd(__h, msgTypeCode);
        __h = IceInternal.HashUtil.hashAdd(__h, businessKey);
        __h = IceInternal.HashUtil.hashAdd(__h, msgParams);
        __h = IceInternal.HashUtil.hashAdd(__h, msgTime);
        return __h;
    }

    public MessageIce
    clone()
    {
        MessageIce c = null;
        try
        {
            c = (MessageIce)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(msgTypeCode);
        __os.writeString(businessKey);
        __os.writeString(msgParams);
        __os.writeLong(msgTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        msgTypeCode = __is.readString();
        businessKey = __is.readString();
        msgParams = __is.readString();
        msgTime = __is.readLong();
    }

    static public void
    __write(IceInternal.BasicStream __os, MessageIce __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public MessageIce
    __read(IceInternal.BasicStream __is, MessageIce __v)
    {
        if(__v == null)
        {
             __v = new MessageIce();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final MessageIce __nullMarshalValue = new MessageIce();

    public static final long serialVersionUID = 1577101199L;
}
